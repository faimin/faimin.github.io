<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero.D.Saber&#39;s Home</title>
  
  <subtitle>困于心，衡于虑，而后作！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-30T03:16:57.287Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zero.D.Saber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS开发技巧整理</title>
    <link href="http://yoursite.com/2018/08/30/iOS-develop-tips/"/>
    <id>http://yoursite.com/2018/08/30/iOS-develop-tips/</id>
    <published>2018-08-30T02:57:59.000Z</published>
    <updated>2018-08-30T03:16:57.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UITableView-plain样式下，让section跟随滑动"><a href="#UITableView-plain样式下，让section跟随滑动" class="headerlink" title="UITableView plain样式下，让section跟随滑动"></a>UITableView plain样式下，让section跟随滑动</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让section跟随滑动</span></span><br><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line"><span class="meta">#if 1</span></span><br><span class="line">    <span class="comment">// 上拉为正数，下拉为负数</span></span><br><span class="line">    <span class="built_in">CGFloat</span> contentOffsetY = scrollView.contentOffset.y;</span><br><span class="line">    <span class="keyword">if</span> (contentOffsetY &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">CGFloat</span> padding = MIN(contentOffsetY, SectionHeight);</span><br><span class="line">        <span class="keyword">self</span>.tableView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-padding, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (contentOffsetY &gt; <span class="keyword">self</span>.recordContentOffsetY) &#123;   <span class="comment">// 上拉</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;                                              <span class="comment">// 下拉</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.recordContentOffsetY = contentOffsetY; <span class="comment">//设置一全局变量，记录滑动偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contentOffsetY &lt;= SectionHeight &amp;&amp; contentOffsetY &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        scrollView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-contentOffsetY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (contentOffsetY &gt;= SectionHeight) &#123;</span><br><span class="line">        scrollView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-SectionHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置tableViewCell之间的分割线"><a href="#设置tableViewCell之间的分割线" class="headerlink" title="设置tableViewCell之间的分割线"></a>设置tableViewCell之间的分割线</h3><ul><li>第一种办法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 `tableView`的`separatorInset`</span></span><br><span class="line"><span class="keyword">self</span>.tableView.separatorInset = <span class="built_in">UIEdgeInsetsZero</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行程序后还是存在边距,接下来设置cell的属性</span></span><br><span class="line">cell.layoutMargins = <span class="built_in">UIEdgeInsetsZero</span>;</span><br></pre></td></tr></table></figure><ul><li>第二种办法（推荐）</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、隐藏tableview的分割线</span></span><br><span class="line"><span class="keyword">self</span>.tableView.separatorStyle = <span class="built_in">UITableViewCellSeparatorStyleNone</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、把分割线的颜色设置为tableview的背景色</span></span><br><span class="line"><span class="keyword">self</span>.tableView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、重写cell的setFrame方法</span></span><br><span class="line">- (<span class="keyword">void</span>)setFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    frame.size.height -=<span class="number">1</span>;</span><br><span class="line">    [<span class="keyword">super</span> setFrame:frame];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置tableViewCell分割线的左右边距"><a href="#设置tableViewCell分割线的左右边距" class="headerlink" title="设置tableViewCell分割线的左右边距"></a>设置<code>tableViewCell</code>分割线的左右边距</h3><p>Refer： <a href="http://itangqi.me/2017/02/28/uitableview-cell-separatorinset/" target="_blank" rel="noopener">http://itangqi.me/2017/02/28/uitableview-cell-separatorinset/</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="comment">// If cell margins are derived from the width of the readableContentGuide.</span></span><br><span class="line">    <span class="comment">// NS_AVAILABLE_IOS(9_0)，需进行判断</span></span><br><span class="line">    <span class="comment">// 设置为 NO，防止在横屏时留白</span></span><br><span class="line">    <span class="keyword">if</span> ([tableView respondsToSelector:<span class="keyword">@selector</span>(setCellLayoutMarginsFollowReadableWidth:)]) &#123;</span><br><span class="line">        tableView.cellLayoutMarginsFollowReadableWidth = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prevent the cell from inheriting the Table View's margin settings.</span></span><br><span class="line">    <span class="comment">// NS_AVAILABLE_IOS(8_0)，需进行判断</span></span><br><span class="line">    <span class="comment">// 阻止 Cell 继承来自 TableView 相关的设置（LayoutMargins or SeparatorInset），设置为 NO 后，Cell 可以独立地设置其自身的分割线边距而不依赖于 TableView</span></span><br><span class="line">    <span class="keyword">if</span> ([cell respondsToSelector:<span class="keyword">@selector</span>(setPreservesSuperviewLayoutMargins:)]) &#123;</span><br><span class="line">        [cell setPreservesSuperviewLayoutMargins:<span class="literal">NO</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove seperator inset.</span></span><br><span class="line">    <span class="comment">// NS_AVAILABLE_IOS(8_0)，需进行判断</span></span><br><span class="line">    <span class="comment">// 移除 Cell 的 layoutMargins（即设置为 0）</span></span><br><span class="line">    <span class="keyword">if</span> ([cell respondsToSelector:<span class="keyword">@selector</span>(setLayoutMargins:)]) &#123;</span><br><span class="line">        [cell setLayoutMargins:<span class="built_in">UIEdgeInsetsZero</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Explictly set your cell's layout margins.</span></span><br><span class="line">    <span class="comment">// NS_AVAILABLE_IOS(7_0)，需进行判断</span></span><br><span class="line">    <span class="comment">// 根据需求设置相应的边距</span></span><br><span class="line">    <span class="keyword">if</span> ([cell respondsToSelector:<span class="keyword">@selector</span>(setSeparatorInset:)]) &#123;</span><br><span class="line">        [cell setSeparatorInset:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">16</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改UITableviewCell-imageView的大小"><a href="#修改UITableviewCell-imageView的大小" class="headerlink" title="修改UITableviewCell.imageView的大小"></a>修改<code>UITableviewCell.imageView</code>的大小</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *icon = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@""</span>];</span><br><span class="line"><span class="built_in">CGSize</span> itemSize = <span class="built_in">CGSizeMake</span>(<span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(itemSize, <span class="literal">NO</span> ,<span class="number">0.0</span>);</span><br><span class="line"><span class="built_in">CGRect</span> imageRect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, itemSize.width, itemSize.height);</span><br><span class="line">[icon drawInRect:imageRect];</span><br><span class="line">cell.imageView.image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</span><br></pre></td></tr></table></figure><h3 id="判断某一行cell是否已经显示"><a href="#判断某一行cell是否已经显示" class="headerlink" title="判断某一行cell是否已经显示"></a>判断某一行<code>cell</code>是否已经显示</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> cellRect = [tableView rectForRowAtIndexPath:indexPath];</span><br><span class="line"><span class="built_in">BOOL</span> completelyVisible = <span class="built_in">CGRectContainsRect</span>(tableView.bounds, cellRect);</span><br></pre></td></tr></table></figure><h3 id="打开或禁用UIView的复制、选择、全选等功能"><a href="#打开或禁用UIView的复制、选择、全选等功能" class="headerlink" title="打开或禁用UIView的复制、选择、全选等功能"></a>打开或禁用<code>UIView</code>的复制、选择、全选等功能</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// override the method</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)canPerformAction:(SEL)action withSender:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">// 返回NO为禁用，YES为开启</span></span><br><span class="line">    <span class="comment">// 粘贴</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(paste:)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// 剪切</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(cut:)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// 复制</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(<span class="keyword">copy</span>:)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// 选择</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(select:)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// 选中全部</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(selectAll:)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(delete:)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// 分享</span></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(share)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> canPerformAction:action withSender:sender];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让UIView支持Autolayout计算高度"><a href="#让UIView支持Autolayout计算高度" class="headerlink" title="让UIView支持Autolayout计算高度"></a>让<code>UIView</code>支持<code>Autolayout</code>计算高度</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写系统计算高度的方法</span></span><br><span class="line">- (<span class="built_in">CGSize</span>)systemLayoutSizeFittingSize:(<span class="built_in">CGSize</span>)targetSize withHorizontalFittingPriority:(<span class="built_in">UILayoutPriority</span>)horizontalFittingPriority verticalFittingPriority:(<span class="built_in">UILayoutPriority</span>)verticalFittingPriority &#123;</span><br><span class="line"></span><br><span class="line">    [_tagView layoutIfNeeded];</span><br><span class="line">    [_tagView invalidateIntrinsicContentSize];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> systemLayoutSizeFittingSize:targetSize withHorizontalFittingPriority:horizontalFittingPriority verticalFittingPriority:verticalFittingPriority];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为NavigationBar设置titleView"><a href="#为NavigationBar设置titleView" class="headerlink" title="为NavigationBar设置titleView"></a>为<code>NavigationBar</code>设置<code>titleView</code></h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *titleButton = (&#123;</span><br><span class="line">    <span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    button.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    button.titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16</span>];</span><br><span class="line">    [titleButton setTitle:showTitle forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [titleButton setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"top-arrw"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    <span class="comment">// 这句话是重点，如果不调用`sizeToFit`方法的话，titleView根本显示不出来，或者只显示文字</span></span><br><span class="line">    [titleButton sizeToFit];</span><br><span class="line">    button;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">self</span>.navigationItem.titleView = titleButton;</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://stackoverflow.com/questions/13341562/how-to-set-button-for-navigationitem-titleview" target="_blank" rel="noopener">http://stackoverflow.com/questions/13341562/how-to-set-button-for-navigationitem-titleview</a></p></blockquote><h3 id="手动更改iOS状态栏颜色"><a href="#手动更改iOS状态栏颜色" class="headerlink" title="手动更改iOS状态栏颜色"></a>手动更改iOS状态栏颜色</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setStatusBarBackgroundColor:(<span class="built_in">UIColor</span> *)color &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *statusBar = [[[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@"statusBarWindow"</span>] valueForKey:<span class="string">@"statusBar"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([statusBar respondsToSelector:<span class="keyword">@selector</span>(setBackgroundColor:)]) &#123;</span><br><span class="line">        statusBar.backgroundColor = color;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更改状态栏的类型"><a href="#更改状态栏的类型" class="headerlink" title="更改状态栏的类型"></a>更改状态栏的类型</h3><p><a href="http://www.tuicool.com/articles/MZfyE3Z" target="_blank" rel="noopener">iOS 中关于 NavigationController 中 preferredStatusBarStyle 一直不执行的问题</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在plist文件里把 `View controller-based status bar appearance` 设置成 `YES`。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">- (<span class="keyword">void</span>)changeNavigationAndStatusBarStyle &#123;</span><br><span class="line">    <span class="comment">/// 状态栏</span></span><br><span class="line">    [<span class="keyword">self</span> preferredStatusBarStyle];</span><br><span class="line">    [<span class="keyword">self</span> setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.isBlackStatusBar ? <span class="built_in">UIStatusBarStyleDefault</span> : <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="禁用UIButton的高亮状态"><a href="#禁用UIButton的高亮状态" class="headerlink" title="禁用UIButton的高亮状态"></a>禁用UIButton的高亮状态</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button.adjustsImageWhenHighlighted = <span class="literal">NO</span>;</span><br><span class="line"><span class="comment">//或者在创建的时候</span></span><br><span class="line"><span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br></pre></td></tr></table></figure><h3 id="判断view是不是指定视图的子视图"><a href="#判断view是不是指定视图的子视图" class="headerlink" title="判断view是不是指定视图的子视图"></a>判断view是不是指定视图的子视图</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> isView = [targetView isDescendantOfView:superView];</span><br></pre></td></tr></table></figure><h3 id="判断viewController是disappear还是dealloc"><a href="#判断viewController是disappear还是dealloc" class="headerlink" title="判断viewController是disappear还是dealloc"></a>判断viewController是disappear还是dealloc</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BOOL</span> isContains = [<span class="keyword">self</span>.navigationController.childViewControllers containsObject:<span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">if</span> (isContains) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"控制器只是单纯的disappear，比如pushToVC"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"控制器将要释放了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断当前viewController是push进来的还是present进来的"><a href="#判断当前viewController是push进来的还是present进来的" class="headerlink" title="判断当前viewController是push进来的还是present进来的"></a>判断当前viewController是push进来的还是present进来的</h3><blockquote><p>如果A弹出B，那么A为presenting，B为presented。<br>A弹出B , 则B就是A的presentedViewController, A就是B的presentingViewController。</p><p>虽然A为控制器，但是当打印B的presentingViewController，显示类型为导航控制器，这说明如果当前视图有自己的导航控制器，则最终调用present方法的是当前控制器的导航控制器，如果不存在导航控制器，调用着是当前控制器（self）。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果存在presentingViewController，则说明是当前视图是present出来的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.presentingViewController) &#123; </span><br><span class="line">    [<span class="keyword">self</span>.presentingViewController dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">NULL</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改UItextField中placeholder的文字颜色"><a href="#修改UItextField中placeholder的文字颜色" class="headerlink" title="修改UItextField中placeholder的文字颜色"></a>修改<code>UItextField</code>中<code>placeholder</code>的文字颜色</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[textField setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@"_placeholderLabel.textColor"</span>];</span><br></pre></td></tr></table></figure><h3 id="UITextField光标右移"><a href="#UITextField光标右移" class="headerlink" title="UITextField光标右移"></a><code>UITextField</code>光标右移</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 leftView</span></span><br><span class="line">searchTextField.leftViewMode = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">searchTextField.leftView = (&#123;</span><br><span class="line">    <span class="built_in">UIView</span> *leftView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, margin, searchTextField.my_height)];</span><br><span class="line">    leftView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    leftView;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="UITextField文字周围增加边距"><a href="#UITextField文字周围增加边距" class="headerlink" title="UITextField文字周围增加边距"></a><code>UITextField</code>文字周围增加边距</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类化UITextField，增加insert属性</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDTextField</span> : <span class="title">UITextField</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UIEdgeInsets</span> insets;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在.m文件重写下列方法</span></span><br><span class="line">- (<span class="built_in">CGRect</span>)textRectForBounds:(<span class="built_in">CGRect</span>)bounds &#123;</span><br><span class="line">    <span class="built_in">CGRect</span> paddedRect = <span class="built_in">UIEdgeInsetsInsetRect</span>(bounds, <span class="keyword">self</span>.insets);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.rightViewMode == <span class="built_in">UITextFieldViewModeAlways</span> || <span class="keyword">self</span>.rightViewMode == <span class="built_in">UITextFieldViewModeUnlessEditing</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> adjustRectWithWidthRightView:paddedRect];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paddedRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGRect</span>)placeholderRectForBounds:(<span class="built_in">CGRect</span>)bounds &#123;</span><br><span class="line">    <span class="built_in">CGRect</span> paddedRect = <span class="built_in">UIEdgeInsetsInsetRect</span>(bounds, <span class="keyword">self</span>.insets);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.rightViewMode == <span class="built_in">UITextFieldViewModeAlways</span> || <span class="keyword">self</span>.rightViewMode == <span class="built_in">UITextFieldViewModeUnlessEditing</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> adjustRectWithWidthRightView:paddedRect];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paddedRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGRect</span>)editingRectForBounds:(<span class="built_in">CGRect</span>)bounds &#123;</span><br><span class="line">    <span class="built_in">CGRect</span> paddedRect = <span class="built_in">UIEdgeInsetsInsetRect</span>(bounds, <span class="keyword">self</span>.insets);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.rightViewMode == <span class="built_in">UITextFieldViewModeAlways</span> || <span class="keyword">self</span>.rightViewMode == <span class="built_in">UITextFieldViewModeWhileEditing</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> adjustRectWithWidthRightView:paddedRect];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paddedRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGRect</span>)adjustRectWithWidthRightView:(<span class="built_in">CGRect</span>)bounds &#123;</span><br><span class="line">    <span class="built_in">CGRect</span> paddedRect = bounds;</span><br><span class="line">    paddedRect.size.width -= <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.rightView.frame);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paddedRect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接设置UITextView的placeholder"><a href="#直接设置UITextView的placeholder" class="headerlink" title="直接设置UITextView的placeholder"></a>直接设置<code>UITextView</code>的<code>placeholder</code></h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> setValue:zd_placeHolderLabel forKey:<span class="string">@"_placeholderLabel"</span>];</span><br></pre></td></tr></table></figure><h3 id="动态调整-UITextView-的高度"><a href="#动态调整-UITextView-的高度" class="headerlink" title="动态调整 UITextView 的高度"></a>动态调整 <code>UITextView</code> 的高度</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addKVOObserver &#123;</span><br><span class="line">    [<span class="keyword">self</span> addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"contentSize"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                      ofObject:(<span class="keyword">id</span>)object</span><br><span class="line">                        change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)change</span><br><span class="line">                       context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="built_in">UITextView</span> *textView = object;</span><br><span class="line">    textView.frame = (<span class="built_in">CGRect</span>)&#123;textView.frame.origin, textView.frame.size.width, textView.contentSize.height&#125;;</span><br><span class="line">    <span class="built_in">CGFloat</span> topCorrect = (textView.bounds.size.height - textView.contentSize.height * textView.zoomScale)/<span class="number">2.0</span>;</span><br><span class="line">    topCorrect = MAX(<span class="number">0.0</span>, topCorrect);</span><br><span class="line">    textView.contentOffset = (<span class="built_in">CGPoint</span>)&#123;<span class="number">0</span>, -topCorrect&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当UITextView-UITextField中没有文字时，禁用回车键"><a href="#当UITextView-UITextField中没有文字时，禁用回车键" class="headerlink" title="当UITextView/UITextField中没有文字时，禁用回车键"></a>当<code>UITextView/UITextField</code>中没有文字时，禁用回车键</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textField.enablesReturnKeyAutomatically = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure><h3 id="动画修改UILabel上的文字"><a href="#动画修改UILabel上的文字" class="headerlink" title="动画修改UILabel上的文字"></a>动画修改<code>UILabel</code>上的文字</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="built_in">CATransition</span> *animation = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">animation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</span><br><span class="line">animation.type = kCATransitionFade;</span><br><span class="line">animation.duration = <span class="number">0.75</span>;</span><br><span class="line">[<span class="keyword">self</span>.label.layer addAnimation:animation forKey:<span class="string">@"kCATransitionFade"</span>];</span><br><span class="line"><span class="keyword">self</span>.label.text = <span class="string">@"New"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">[<span class="built_in">UIView</span> transitionWithView:<span class="keyword">self</span>.label</span><br><span class="line">                      duration:<span class="number">0.25</span>f</span><br><span class="line">                       options:<span class="built_in">UIViewAnimationOptionTransitionCrossDissolve</span></span><br><span class="line">                    animations:^&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">self</span>.label.text = <span class="string">@"Well done!"</span>;</span><br><span class="line"></span><br><span class="line">                    &#125; completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span></span><br><span class="line">                     animations:^&#123;</span><br><span class="line">                         <span class="keyword">self</span>.label.alpha = <span class="number">0.0</span>f;</span><br><span class="line">                         <span class="keyword">self</span>.label.text = <span class="string">@"newText"</span>;</span><br><span class="line">                         <span class="keyword">self</span>.label.alpha = <span class="number">1.0</span>f;</span><br><span class="line">                     &#125;];</span><br></pre></td></tr></table></figure><h3 id="计算UILabel上某段文字的frame"><a href="#计算UILabel上某段文字的frame" class="headerlink" title="计算UILabel上某段文字的frame"></a>计算<code>UILabel</code>上某段文字的<code>frame</code></h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UILabel</span> (<span class="title">TextRect</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGRect</span>)boundingRectForCharacterRange:(<span class="built_in">NSRange</span>)range &#123;</span><br><span class="line">    <span class="built_in">NSTextStorage</span> *textStorage = [[<span class="built_in">NSTextStorage</span> alloc] initWithAttributedString:[<span class="keyword">self</span> attributedText]];</span><br><span class="line">    <span class="built_in">NSLayoutManager</span> *layoutManager = [[<span class="built_in">NSLayoutManager</span> alloc] init];</span><br><span class="line">    [textStorage addLayoutManager:layoutManager];</span><br><span class="line">    <span class="built_in">NSTextContainer</span> *textContainer = [[<span class="built_in">NSTextContainer</span> alloc] initWithSize:[<span class="keyword">self</span> bounds].size];</span><br><span class="line">    textContainer.lineFragmentPadding = <span class="number">0</span>;</span><br><span class="line">    [layoutManager addTextContainer:textContainer];</span><br><span class="line">    <span class="built_in">NSRange</span> glyphRange;</span><br><span class="line">    [layoutManager characterRangeForGlyphRange:range actualGlyphRange:&amp;glyphRange];</span><br><span class="line">    <span class="keyword">return</span> [layoutManager boundingRectForGlyphRange:glyphRange inTextContainer:textContainer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取消隐式动画"><a href="#取消隐式动画" class="headerlink" title="取消隐式动画"></a>取消隐式动画</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">[<span class="built_in">UIView</span> performWithoutAnimation:^&#123;</span><br><span class="line">    [collectionView reloadItemsAtIndexPaths:@[[<span class="built_in">NSIndexPath</span> indexPathForItem:index inSection:<span class="number">0</span>]]];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0</span> animations:^&#123;</span><br><span class="line">    [collectionView performBatchUpdates:^&#123;</span><br><span class="line">        [collectionView reloadItemsAtIndexPaths:@[[<span class="built_in">NSIndexPath</span> indexPathForItem:index inSection:<span class="number">0</span>]]];</span><br><span class="line">    &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line">[<span class="built_in">UIView</span> setAnimationsEnabled:<span class="literal">NO</span>];</span><br><span class="line">[<span class="keyword">self</span>.trackPanel performBatchUpdates:^&#123;</span><br><span class="line">    [collectionView reloadItemsAtIndexPaths:@[[<span class="built_in">NSIndexPath</span> indexPathForItem:index inSection:<span class="number">0</span>]]];</span><br><span class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationsEnabled:<span class="literal">YES</span>];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四</span></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">CATransaction</span> begin];</span><br><span class="line">    [<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.frameLayer.frame = <span class="keyword">self</span>.frameView.bounds;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">CATransaction</span> commit];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动画暂停和重新开始"><a href="#动画暂停和重新开始" class="headerlink" title="动画暂停和重新开始"></a>动画暂停和重新开始</h3><p>Reference： <a href="http://stackoverflow.com/questions/2306870/is-there-a-way-to-pause-a-cabasicanimation/3003922#3003922" target="_blank" rel="noopener">http://stackoverflow.com/questions/2306870/is-there-a-way-to-pause-a-cabasicanimation/3003922#3003922</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)pauseLayer:(<span class="built_in">CALayer</span> *)layer &#123;</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> pausedTime = [layer convertTime:<span class="built_in">CACurrentMediaTime</span>() fromLayer:<span class="literal">nil</span>];</span><br><span class="line">    layer.speed = <span class="number">0.0</span>;</span><br><span class="line">    layer.timeOffset = pausedTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)resumeLayer:(<span class="built_in">CALayer</span> *)layer &#123;</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> pausedTime = [layer timeOffset];</span><br><span class="line">    layer.speed = <span class="number">1.0</span>;</span><br><span class="line">    layer.timeOffset = <span class="number">0.0</span>;</span><br><span class="line">    layer.beginTime = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">CFTimeInterval</span> timeSincePause = [layer convertTime:<span class="built_in">CACurrentMediaTime</span>() fromLayer:<span class="literal">nil</span>] - pausedTime;</span><br><span class="line">    layer.beginTime = timeSincePause;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pop动画"><a href="#Pop动画" class="headerlink" title="Pop动画"></a>Pop动画</h3><p><a href="https://github.com/facebook/pop/issues/28" target="_blank" rel="noopener">https://github.com/facebook/pop/issues/28</a></p><p><img src="https://camo.githubusercontent.com/28a42913bbc1dd0d27459991ef14b0a3b9a80489/687474703a2f2f662e636c2e6c792f6974656d732f334f3351336d3368305431323268316f323531592f506f70436f6e74726f6c506f696e74732e676966" alt=""></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> controlPointOfLine; <span class="comment">// property on view controller</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)controlPointAnimation &#123;</span><br><span class="line">    <span class="keyword">self</span>.controlPointOfLine = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> height = <span class="number">300.</span>f;</span><br><span class="line">    bendiPath = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [bendiPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)];</span><br><span class="line">    [bendiPath addCurveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, height) controlPoint1:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, height * <span class="number">0.5</span>) controlPoint2:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, height * <span class="number">0.5</span>)];</span><br><span class="line"></span><br><span class="line">    shape = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    shape.path = bendiPath.CGPath;</span><br><span class="line">    shape.strokeColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">    shape.lineWidth = <span class="number">10.</span>f;</span><br><span class="line">    shape.fillColor = <span class="literal">nil</span>;</span><br><span class="line">    shape.position =<span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.view.bounds.size.width * <span class="number">0.5</span>, <span class="keyword">self</span>.view.bounds.size.height * <span class="number">0.5</span>);</span><br><span class="line">    [<span class="keyword">self</span>.view.layer addSublayer:shape];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    return;</span></span><br><span class="line">    <span class="keyword">self</span>.pop = [POPAnimatableProperty propertyWithName:<span class="string">@"controlPointOfLine"</span> initializer:^(POPMutableAnimatableProperty *prop) &#123;</span><br><span class="line">        <span class="comment">// read value</span></span><br><span class="line">        prop.readBlock = ^(DHTDetailViewController *obj, <span class="built_in">CGFloat</span> values[]) &#123;</span><br><span class="line">            values[<span class="number">0</span>] = <span class="keyword">self</span>.controlPointOfLine;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// write value</span></span><br><span class="line">        prop.writeBlock = ^(DHTDetailViewController *obj, <span class="keyword">const</span> <span class="built_in">CGFloat</span> values[]) &#123;</span><br><span class="line">            obj.controlPointOfLine = values[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// update bezier</span></span><br><span class="line">            [bendiPath removeAllPoints];</span><br><span class="line">            [bendiPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)];</span><br><span class="line">            [bendiPath addCurveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, height) controlPoint1:<span class="built_in">CGPointMake</span>(obj.controlPointOfLine, height * <span class="number">0.5</span>) controlPoint2:<span class="built_in">CGPointMake</span>(obj.controlPointOfLine, height * <span class="number">0.5</span>)];</span><br><span class="line"></span><br><span class="line">            [label setText:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%f"</span>, obj.controlPointOfLine]];</span><br><span class="line">            [label sizeToFit];</span><br><span class="line">            label.layer.position = <span class="keyword">self</span>.view.center;</span><br><span class="line">            shape.path = bendiPath.CGPath;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// dynamics threshold</span></span><br><span class="line">        prop.threshold = <span class="number">0.1</span>;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.anim = [POPSpringAnimation animation];</span><br><span class="line">    _anim.fromValue = @(<span class="number">-50.0</span>);</span><br><span class="line">    _anim.toValue =  @(<span class="number">0.</span>f);</span><br><span class="line">    _anim.springBounciness = <span class="number">30.1</span>;</span><br><span class="line">    _anim.springSpeed = <span class="number">10.4</span>;</span><br><span class="line">    _anim.dynamicsTension = <span class="number">2000</span>;</span><br><span class="line">    _anim.property = <span class="keyword">self</span>.pop;</span><br><span class="line">    [<span class="keyword">self</span> pop_addAnimation:_anim forKey:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</span><br><span class="line"></span><br><span class="line"><span class="comment">// get touches in view, before and after shapelayer, to get the new control point</span></span><br><span class="line">    <span class="built_in">UITouch</span> *touch = [[event allTouches] anyObject];</span><br><span class="line">    <span class="built_in">CGPoint</span> location = [touch locationInView:touch.view];</span><br><span class="line">    <span class="built_in">CGFloat</span> controlPoint = location.x - shape.position.x;</span><br><span class="line"></span><br><span class="line">    _anim.fromValue = @(controlPoint);</span><br><span class="line">    _anim.toValue =  @(<span class="number">0.</span>f);</span><br><span class="line"></span><br><span class="line">     [<span class="keyword">self</span> pop_addAnimation:_anim forKey:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autolayout动画"><a href="#Autolayout动画" class="headerlink" title="Autolayout动画"></a>Autolayout动画</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[containerView setNeedsLayout];</span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span> animations:^&#123;</span><br><span class="line">  <span class="comment">// Make all constraint changes here</span></span><br><span class="line">  [containerView layoutIfNeeded];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="去掉导航栏返回按钮的back标题"><a href="#去掉导航栏返回按钮的back标题" class="headerlink" title="去掉导航栏返回按钮的back标题"></a>去掉导航栏返回按钮的back标题</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方法:</span></span><br><span class="line">[[<span class="built_in">UIBarButtonItem</span> appearance] setBackButtonTitlePositionAdjustment:<span class="built_in">UIOffsetMake</span>(<span class="number">0</span>, <span class="number">-60</span>) forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法:</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UINavigationItem</span> (<span class="title">backBarButttonItem</span>)</span></span><br><span class="line">- (<span class="built_in">UIBarButtonItem</span>*)backBarButtonItem &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">UIDevice</span> iOS_7]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [[<span class="built_in">UIBarButtonItem</span> alloc] initWithTitle:<span class="string">@""</span> style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="literal">nil</span> action:<span class="literal">NULL</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [[<span class="built_in">UIBarButtonItem</span> alloc] initWithTitle:<span class="string">@" "</span> style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="literal">nil</span> action:<span class="literal">NULL</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调整barButtonItem之间的距离"><a href="#调整barButtonItem之间的距离" class="headerlink" title="调整barButtonItem之间的距离"></a>调整barButtonItem之间的距离</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *img = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"icon_cog"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</span><br><span class="line"><span class="comment">//宽度为负数的固定间距的系统item</span></span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *rightNegativeSpacer = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithBarButtonSystemItem:<span class="built_in">UIBarButtonSystemItemFixedSpace</span> target:<span class="literal">nil</span> action:<span class="literal">nil</span>];</span><br><span class="line">[rightNegativeSpacer setWidth:<span class="number">-15</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *rightBtnItem1 = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithImage:img style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rightButtonItemClicked:)];</span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *rightBtnItem2 = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithImage:img style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rightButtonItemClicked:)];</span><br><span class="line"><span class="keyword">self</span>.navigationItem.rightBarButtonItems = @[rightNegativeSpacer,rightBtnItem1,rightBtnItem2];</span><br></pre></td></tr></table></figure><h3 id="解决自定义返回按钮导致手势返回失败的问题"><a href="#解决自定义返回按钮导致手势返回失败的问题" class="headerlink" title="解决自定义返回按钮导致手势返回失败的问题"></a>解决自定义返回按钮导致手势返回失败的问题</h3><blockquote><p>1、代理方法</p><p>思路：先把导航控制器手势返回的代理保存起来，然后再把当前的控制器设为导航控制器手势返回的代理；当当前控制消失的时候再把原来的代理给导航控制器的手势返回。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">id</span>&lt;<span class="built_in">UIGestureRecognizerDelegate</span>&gt; _delegate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">   [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 自定义返回按钮</span></span><br><span class="line">   <span class="built_in">UIBarButtonItem</span> *backItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithCustomView:(&#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *backButton = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">        backButton.size = (<span class="built_in">CGSize</span>)&#123;<span class="number">22</span>, <span class="number">22</span>&#125;;</span><br><span class="line">        backButton.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"icon_back"</span>];</span><br><span class="line">        [backButton.image addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(back:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">        backButton;</span><br><span class="line">    &#125;)];</span><br><span class="line">    <span class="keyword">self</span>.navigationItem.leftBarButtonItem = backItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)back:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.viewControllers.count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 记录系统返回手势的代理</span></span><br><span class="line">        _delegate = <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate;</span><br><span class="line">          <span class="comment">// 设置系统返回手势的代理为当前控制器</span></span><br><span class="line">        <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">     <span class="comment">// 设置系统返回手势的代理为我们刚进入控制器的时候记录的系统的返回手势代理</span></span><br><span class="line">    <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = _delegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - UIGestureRecognizerDelegate</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.navigationController.childViewControllers.count &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.navigationController.viewControllers.count &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>2、添加action事件的方法</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(xxxx)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer removeTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(xxxx)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全屏手势返回"><a href="#全屏手势返回" class="headerlink" title="全屏手势返回"></a>全屏手势返回</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// self.interactivePopGestureRecognizer系统手势类型为`UIScreenEdgePanGestureRecognizer`</span></span><br><span class="line">    <span class="comment">// 设置代理</span></span><br><span class="line">    <span class="keyword">id</span> target = <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate;</span><br><span class="line">    <span class="comment">// 创建手势,并设置代理</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:target action:<span class="keyword">@selector</span>(handleNavigationTransition:)];</span><br><span class="line">    pan.delegate = <span class="keyword">self</span>;</span><br><span class="line">    <span class="comment">// 添加手势</span></span><br><span class="line">    [<span class="keyword">self</span>.view addGestureRecognizer:pan];</span><br><span class="line">     <span class="comment">// 将系统自带的手势覆盖掉</span></span><br><span class="line">    <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从一个隐藏导航栏的-A-控制器-push-到一个有导航栏的-B-控制器中-导航栏隐藏问题"><a href="#从一个隐藏导航栏的-A-控制器-push-到一个有导航栏的-B-控制器中-导航栏隐藏问题" class="headerlink" title="从一个隐藏导航栏的 A 控制器 push 到一个有导航栏的 B 控制器中(导航栏隐藏问题)"></a>从一个隐藏导航栏的 A 控制器 push 到一个有导航栏的 B 控制器中(导航栏隐藏问题)</h3><blockquote><p>在不显示导航栏的 A 控制器中遵守<code>UINavigationControllerDelegate</code>协议,实现其代理方法</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UINavigationControllerDelegate</span></span><br><span class="line">-(<span class="keyword">void</span>)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController willShowViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> isShowBar = [viewController isKindOfClass:[<span class="keyword">self</span> <span class="keyword">class</span>]];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController setNavigationBarHidden:isShowBar animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面跳转时翻转动画"><a href="#页面跳转时翻转动画" class="headerlink" title="页面跳转时翻转动画"></a>页面跳转时翻转动画</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modal方式</span></span><br><span class="line">    TestViewController *vc = [[TestViewController alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    vc.modalTransitionStyle = <span class="built_in">UIModalTransitionStyleCoverVertical</span>;</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:vc animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方式</span></span><br><span class="line">    TestViewController *vc = [[TestViewController alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [<span class="built_in">UIView</span> beginAnimations:<span class="string">@"View Flip"</span> context:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationDuration:<span class="number">0.80</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationCurve:<span class="built_in">UIViewAnimationCurveEaseInOut</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationTransition:<span class="built_in">UIViewAnimationTransitionFlipFromRight</span> forView:<span class="keyword">self</span>.navigationController.view cache:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:vc animated:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> commitAnimations];</span><br></pre></td></tr></table></figure><h3 id="以modal样式进行push跳转"><a href="#以modal样式进行push跳转" class="headerlink" title="以modal样式进行push跳转"></a>以<code>modal</code>样式进行<code>push</code>跳转</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)push &#123;</span><br><span class="line">    TestViewController *vc = [[TestViewController alloc] init];</span><br><span class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    <span class="built_in">CATransition</span>* transition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">    transition.duration = <span class="number">0.4</span>f;</span><br><span class="line">    transition.type = kCATransitionMoveIn;</span><br><span class="line">    transition.subtype = kCATransitionFromTop;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.view.layer addAnimation:transition forKey:kCATransition];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:vc animated:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pop &#123;</span><br><span class="line">    <span class="built_in">CATransition</span>* transition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">    transition.duration = <span class="number">0.4</span>f;</span><br><span class="line">    transition.type = kCATransitionReveal;</span><br><span class="line">    transition.subtype = kCATransitionFromBottom;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.view.layer addAnimation:transition forKey:kCATransition];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dispatch-Source方式调整进度"><a href="#Dispatch-Source方式调整进度" class="headerlink" title="Dispatch Source方式调整进度"></a><code>Dispatch Source</code>方式调整进度</h3><blockquote><p><a href="http://www.jianshu.com/p/880c2f9301b6" target="_blank" rel="noopener">多线程–Dispatch Source</a></p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、指定`DISPATCH_SOURCE_TYPE_DATA_ADD`，做成Dispatch Source(分派源)。设定Main Dispatch Queue 为追加处理的Dispatch Queue</span></span><br><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_DATA_ADD, <span class="number">0</span>, <span class="number">0</span>, dispatch_get_main_queue());</span><br><span class="line"></span><br><span class="line">__block <span class="built_in">NSUInteger</span> totalComplete = <span class="number">0</span>;</span><br><span class="line">dispatch_source_set_event_handler(source, ^&#123;</span><br><span class="line">    <span class="comment">// 当处理事件被最终执行时，计算后的数据可以通过dispatch_source_get_data来获取。</span></span><br><span class="line">    <span class="comment">// 这个数据的值在每次响应事件执行后会被重置，所以totalComplete的值是最终累积的值。</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> value = dispatch_source_get_data(source);</span><br><span class="line">    totalComplete += value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"进度：%f"</span>, totalComplete / <span class="number">100.</span>f);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程号：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分派源创建时默认处于暂停状态，在分派源分派处理程序之前必须先恢复。</span></span><br><span class="line">dispatch_resume(source);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、恢复源后，就可以通过`dispatch_source_merge_data`向`Dispatch Source`(分派源)发送事件:</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSUInteger</span> index = <span class="number">0</span>; index &lt; <span class="number">100</span>; index++) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        dispatch_source_merge_data(source, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        usleep(<span class="number">20000</span>); <span class="comment">//0.02秒</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//3、比较上面的for循环代码，将dispatch_async放在外面for循环的外面，打印结果不一样</span></span><br><span class="line"><span class="comment">dispatch_async(queue, ^&#123;</span></span><br><span class="line"><span class="comment">   for (NSUInteger index = 0; index &lt; 100; index++) &#123;</span></span><br><span class="line"><span class="comment">       dispatch_source_merge_data(source, 1);</span></span><br><span class="line"><span class="comment">       NSLog(@":recycle:线程号：%@~~~~~~~~~~~~i = %ld", [NSThread currentThread], index);</span></span><br><span class="line"><span class="comment">       usleep(20000);//0.02秒</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">// 2是将100个任务添加到queue里面，而3是在queue里面添加一个任务，而这一个任务做了100次循环</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="本地推送"><a href="#本地推送" class="headerlink" title="本地推送"></a>本地推送</h3><blockquote><p>AppDelegate.m</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveLocalNotification:(<span class="built_in">UILocalNotification</span> *)notification&#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">UIApplication</span> sharedApplication].applicationState == <span class="built_in">UIApplicationStateActive</span>) &#123;<span class="comment">//app在前台</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"app在前台"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不在前台</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"app不在前台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>iOS10以前</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)post_Less_iOS10:(<span class="built_in">NSDictionary</span> *)userInfo title:(<span class="built_in">NSString</span> *)title body:(<span class="built_in">NSString</span> *)body &#123;</span><br><span class="line">    <span class="built_in">UILocalNotification</span> *notification = [[<span class="built_in">UILocalNotification</span> alloc] init];</span><br><span class="line">    <span class="comment">// 设置触发通知的时间，这里设置的是立即触发</span></span><br><span class="line">    <span class="built_in">NSDate</span> *fireDate = [<span class="built_in">NSDate</span> date];</span><br><span class="line">    notification.fireDate = fireDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知内容</span></span><br><span class="line">    notification.alertBody =  body;</span><br><span class="line">    <span class="comment">// 标题，iOS8.2之后才有了这个属性</span></span><br><span class="line">    <span class="keyword">if</span> ([notification respondsToSelector:<span class="keyword">@selector</span>(setAlertTitle:)]) &#123;</span><br><span class="line">        notification.alertTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知的声音</span></span><br><span class="line">    notification.soundName = <span class="built_in">UILocalNotificationDefaultSoundName</span>;</span><br><span class="line">    <span class="comment">// 附带内容</span></span><br><span class="line">    notification.userInfo = userInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ios8后，需要添加这个注册，才能得到授权</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] respondsToSelector:<span class="keyword">@selector</span>(registerUserNotificationSettings:)]) &#123;</span><br><span class="line">        <span class="comment">///设置</span></span><br><span class="line">        <span class="built_in">UIUserNotificationType</span> type =  <span class="built_in">UIUserNotificationTypeAlert</span> | <span class="built_in">UIUserNotificationTypeBadge</span> | <span class="built_in">UIUserNotificationTypeSound</span>;</span><br><span class="line">        <span class="built_in">UIUserNotificationSettings</span> *settings = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:type</span><br><span class="line">                                                                                 categories:<span class="literal">nil</span>];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:settings];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行通知注册</span></span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>iOS10之后</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)registerNoti &#123;</span><br><span class="line">    <span class="comment">// iOS10 兼容</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &gt;= <span class="number">10.0</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用 UNUserNotificationCenter 来管理通知</span></span><br><span class="line">        UNUserNotificationCenter *uncenter = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        <span class="comment">// 监听回调事件</span></span><br><span class="line">        [uncenter setDelegate:<span class="keyword">self</span>];</span><br><span class="line">        <span class="comment">//iOS10 使用以下方法注册，才能得到授权</span></span><br><span class="line">        [uncenter requestAuthorizationWithOptions:(UNAuthorizationOptionAlert+UNAuthorizationOptionBadge+UNAuthorizationOptionSound)</span><br><span class="line">                                completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">                                    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span> , granted ? <span class="string">@"授权成功"</span> : <span class="string">@"授权失败"</span>);</span><br><span class="line">                                &#125;];</span><br><span class="line">        <span class="comment">// 获取当前的通知授权状态, UNNotificationSettings</span></span><br><span class="line">        [uncenter getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</span><br><span class="line">            <span class="keyword">if</span> (settings.authorizationStatus == UNAuthorizationStatusNotDetermined) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"未选择"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (settings.authorizationStatus == UNAuthorizationStatusDenied) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"未授权"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (settings.authorizationStatus == UNAuthorizationStatusAuthorized) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"已授权"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)post_iOS10:(<span class="built_in">NSDictionary</span> *)userInfo title:(<span class="built_in">NSString</span> *)title body:(<span class="built_in">NSString</span> *)body &#123;</span><br><span class="line">    <span class="comment">// 使用 UNUserNotificationCenter 来管理通知</span></span><br><span class="line">    UNUserNotificationCenter* center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需创建一个包含待通知内容的 UNMutableNotificationContent 对象，注意不是 UNNotificationContent ,此对象为不可变对象。</span></span><br><span class="line">    UNMutableNotificationContent* content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    content.title = [<span class="built_in">NSString</span> localizedUserNotificationStringForKey:title arguments:<span class="literal">nil</span>];</span><br><span class="line">    content.body = [<span class="built_in">NSString</span> localizedUserNotificationStringForKey:body</span><br><span class="line">                                                         arguments:<span class="literal">nil</span>];</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line"></span><br><span class="line">    content.userInfo  = userInfo;</span><br><span class="line">    <span class="comment">// 在 alertTime 后推送本地推送</span></span><br><span class="line">    UNTimeIntervalNotificationTrigger* trigger = [UNTimeIntervalNotificationTrigger</span><br><span class="line">                                                  triggerWithTimeInterval:<span class="number">1</span> repeats:<span class="literal">NO</span>];</span><br><span class="line"></span><br><span class="line">    UNNotificationRequest* request = [UNNotificationRequest requestWithIdentifier:<span class="string">@"FiveSecond"</span></span><br><span class="line">                                                                          content:content trigger:trigger];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加推送成功后的处理！</span></span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - UNUserNotificationCenterDelegate</span></span><br><span class="line"><span class="comment">///在前台接收到通知</span></span><br><span class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(<span class="keyword">void</span> (^)(UNNotificationPresentationOptions))completionHandler&#123;</span><br><span class="line">    completionHandler(UNNotificationPresentationOptionAlert);<span class="comment">//不写这句通知不会出现在前台，如有需要|UNNotificationPresentationOptionSound，角标UNNotificationPresentationOptionBadge</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///点击通知</span></span><br><span class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span> (^)())completionHandler&#123;</span><br><span class="line">    <span class="comment">//handle touch event</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="禁止锁屏"><a href="#禁止锁屏" class="headerlink" title="禁止锁屏"></a>禁止锁屏</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].idleTimerDisabled = <span class="literal">YES</span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setIdleTimerDisabled:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure><h3 id="退出应用"><a href="#退出应用" class="headerlink" title="退出应用"></a>退出应用</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出方法</span></span><br><span class="line">- (<span class="keyword">void</span>)exitApp &#123;</span><br><span class="line">    [<span class="built_in">UIView</span> beginAnimations:<span class="string">@"exitApplication"</span> context:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationDuration:<span class="number">0.5</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationTransition:<span class="built_in">UIViewAnimationTransitionCurlUp</span></span><br><span class="line">                           forView:<span class="keyword">self</span>.view.window cache:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="built_in">UIView</span> setAnimationDidStopSelector:<span class="keyword">@selector</span>(animationFinished:finished:context:)];</span><br><span class="line">    <span class="keyword">self</span>.view.window.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    [<span class="built_in">UIView</span> commitAnimations];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)animationFinished:(<span class="built_in">NSString</span> *)animationID finished:(<span class="built_in">NSNumber</span> *)finished context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span> ([animationID compare:<span class="string">@"exitApplication"</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        exit(<span class="number">0</span>); <span class="comment">//退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取手机安装的应用"><a href="#获取手机安装的应用" class="headerlink" title="获取手机安装的应用"></a>获取手机安装的应用</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c =<span class="built_in">NSClassFromString</span>(<span class="string">@"LSApplicationWorkspace"</span>);</span><br><span class="line"><span class="keyword">id</span> s = [(<span class="keyword">id</span>)c performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"defaultWorkspace"</span>)];</span><br><span class="line"><span class="built_in">NSArray</span> *array = [s performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"allInstalledApplications"</span>)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"applicationIdentifier"</span>)]);</span><br><span class="line">    <span class="comment">//NSLog(@"%@",[item performSelector:NSSelectorFromString(@"bundleIdentifier")]);</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"bundleVersion"</span>)]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"shortVersionString"</span>)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打开系统设置界面"><a href="#打开系统设置界面" class="headerlink" title="打开系统设置界面"></a>打开系统设置界面</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iOS8之后</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="built_in">UIApplicationOpenSettingsURLString</span>]];</span><br><span class="line"><span class="comment">//如果App没有添加权限，显示的是设定界面。如果App有添加权限（例如通知），显示的是App的设定界面。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//iOS8之前</span></span><br><span class="line"><span class="comment">//先添加一个url type如下图，在代码中调用如下代码,即可跳转到设置页面的对应项</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"prefs:root=WIFI"</span>]];</span><br><span class="line"></span><br><span class="line">可选值如下：</span><br><span class="line">About — prefs:root=General&amp;path=About</span><br><span class="line">Accessibility — prefs:root=General&amp;path=ACCESSIBILITY</span><br><span class="line">Airplane Mode On — prefs:root=AIRPLANE_MODE</span><br><span class="line">Auto-Lock — prefs:root=General&amp;path=AUTOLOCK</span><br><span class="line">Brightness — prefs:root=Brightness</span><br><span class="line">Bluetooth — prefs:root=General&amp;path=Bluetooth</span><br><span class="line">Date &amp; Time — prefs:root=General&amp;path=DATE_AND_TIME</span><br><span class="line">FaceTime — prefs:root=FACETIME</span><br><span class="line">General — prefs:root=General</span><br><span class="line">Keyboard — prefs:root=General&amp;path=Keyboard</span><br><span class="line">iCloud — prefs:root=<span class="built_in">CASTLE</span></span><br><span class="line">iCloud Storage &amp; Backup — prefs:root=<span class="built_in">CASTLE</span>&amp;path=STORAGE_AND_BACKUP</span><br><span class="line">International — prefs:root=General&amp;path=INTERNATIONAL</span><br><span class="line">Location Services — prefs:root=LOCATION_SERVICES</span><br><span class="line">Music — prefs:root=MUSIC</span><br><span class="line">Music Equalizer — prefs:root=MUSIC&amp;path=EQ</span><br><span class="line">Music Volume Limit — prefs:root=MUSIC&amp;path=VolumeLimit</span><br><span class="line">Network — prefs:root=General&amp;path=Network</span><br><span class="line">Nike + iPod — prefs:root=NIKE_PLUS_IPOD</span><br><span class="line">Notes — prefs:root=NOTES</span><br><span class="line">Notification — prefs:root=NOTIFICATI*****_ID</span><br><span class="line">Phone — prefs:root=Phone</span><br><span class="line">Photos — prefs:root=Photos</span><br><span class="line">Profile — prefs:root=General&amp;path=ManagedConfigurationList</span><br><span class="line">Reset — prefs:root=General&amp;path=Reset</span><br><span class="line">Safari — prefs:root=Safari</span><br><span class="line">Siri — prefs:root=General&amp;path=Assistant</span><br><span class="line">Sounds — prefs:root=Sounds</span><br><span class="line">Software Update — prefs:root=General&amp;path=SOFTWARE_UPDATE_LINK</span><br><span class="line">Store — prefs:root=STORE</span><br><span class="line">Twitter — prefs:root=TWITTER</span><br><span class="line">Usage — prefs:root=General&amp;path=USAGE</span><br><span class="line">VPN — prefs:root=General&amp;path=Network/VPN</span><br><span class="line">Wallpaper — prefs:root=Wallpaper</span><br><span class="line">Wi-Fi — prefs:root=WIFI</span><br></pre></td></tr></table></figure><h3 id="iOS开发中的一些相关路径"><a href="#iOS开发中的一些相关路径" class="headerlink" title="iOS开发中的一些相关路径"></a>iOS开发中的一些相关路径</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">模拟器的位置:</span><br><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs </span><br><span class="line"></span><br><span class="line">文档安装位置:</span><br><span class="line">/Applications/Xcode.app/Contents/Developer/Documentation/DocSets</span><br><span class="line"></span><br><span class="line">插件保存路径:</span><br><span class="line">~/Library/ApplicationSupport/Developer/Shared/Xcode/Plug-ins</span><br><span class="line"></span><br><span class="line">自定义代码段的保存路径:</span><br><span class="line">~/Library/Developer/Xcode/UserData/CodeSnippets/ </span><br><span class="line">如果找不到CodeSnippets文件夹，可以自己新建一个CodeSnippets文件夹。</span><br><span class="line"></span><br><span class="line">描述文件路径</span><br><span class="line">~/Library/MobileDevice/Provisioning Profiles</span><br></pre></td></tr></table></figure><h3 id="匹配block的正则表达式"><a href="#匹配block的正则表达式" class="headerlink" title="匹配block的正则表达式"></a>匹配block的正则表达式</h3><p><a href="http://www.regexr.com/" target="_blank" rel="noopener">正则表达式检测</a></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解释：以`^`开头，`&#123;`和`换行符`结束，中间（`*`表示匹配0次或多次，`+`表示匹配一次或者多次）匹配任意字符，最后是换行符</span></span><br><span class="line">\^.*\&#123;\n</span><br></pre></td></tr></table></figure><h3 id="ARC-下打印retainCount（引用计数）"><a href="#ARC-下打印retainCount（引用计数）" class="headerlink" title="ARC 下打印retainCount（引用计数）"></a>ARC 下打印retainCount（引用计数）</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj目标对象</span></span><br><span class="line"><span class="built_in">NSInteger</span> retainCount = <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)obj);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"Retain count is %ld"</span>, retainCount);</span><br></pre></td></tr></table></figure><h3 id="系统隐藏的调试工具类-UIDebuggingInformationOverlay"><a href="#系统隐藏的调试工具类-UIDebuggingInformationOverlay" class="headerlink" title="系统隐藏的调试工具类 UIDebuggingInformationOverlay"></a>系统隐藏的调试工具类 <code>UIDebuggingInformationOverlay</code></h3><blockquote><p>Reference: <a href="http://ryanipete.com/blog/ios/swift/objective-c/uidebugginginformationoverlay/" target="_blank" rel="noopener">http://ryanipete.com/blog/ios/swift/objective-c/uidebugginginformationoverlay/</a><br>1、Call <code>[UIDebuggingInformationOverlay prepareDebuggingOverlay]</code> - I’m not sure exactly what this method does, but the overlay will be empty if you don’t call it.<br>2、Call <code>[[UIDebuggingInformationOverlay overlay] toggleVisibility]</code> - This shows the overlay window (assuming it’s not already visible).</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Objective-C</span></span><br><span class="line">- (<span class="keyword">void</span>)debug &#123;</span><br><span class="line"><span class="meta">#if DEBUG</span></span><br><span class="line">    Class aClass = objc_getClass(<span class="string">"UIDebuggingInformationOverlay"</span>);</span><br><span class="line">    ((<span class="keyword">void</span> (*) (<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend) ((<span class="keyword">id</span>)aClass, sel_registerName(<span class="string">"prepareDebuggingOverlay"</span>));</span><br><span class="line">    <span class="keyword">id</span> returnInstance = ((<span class="keyword">id</span> (*) (<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend) ((<span class="keyword">id</span>)aClass, sel_registerName(<span class="string">"overlay"</span>));</span><br><span class="line">    <span class="comment">// 下面这个方法是可选的，可以不调用，因为直接两个手指点击状态栏就可以调出调试工具</span></span><br><span class="line">    ((<span class="keyword">void</span>* (*) (<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend) ((<span class="keyword">id</span>)returnInstance, sel_registerName(<span class="string">"toggleVisibility"</span>));</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Swift</span></span><br><span class="line"><span class="keyword">let</span> overlayClass = <span class="type">NSClassFromString</span>(<span class="string">"UIDebuggingInformationOverlay"</span>) <span class="keyword">as</span>? <span class="type">UIWindow</span>.<span class="type">Type</span></span><br><span class="line"><span class="number">_</span> = overlayClass?.perform(<span class="type">NSSelectorFromString</span>(<span class="string">"prepareDebuggingOverlay"</span>))</span><br><span class="line"><span class="keyword">let</span> overlay = overlayClass?.perform(<span class="type">NSSelectorFromString</span>(<span class="string">"overlay"</span>)).takeUnretainedValue() <span class="keyword">as</span>? <span class="type">UIWindow</span></span><br><span class="line"><span class="number">_</span> = overlay?.perform(<span class="type">NSSelectorFromString</span>(<span class="string">"toggleVisibility"</span>))</span><br></pre></td></tr></table></figure><h3 id="快速生成以实例变量名称作为key-变量作为value的字典"><a href="#快速生成以实例变量名称作为key-变量作为value的字典" class="headerlink" title="快速生成以实例变量名称作为key,变量作为value的字典"></a>快速生成以实例变量名称作为<code>key</code>,变量作为<code>value</code>的字典</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *packId    = <span class="string">@"zero"</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> *userId    = @(<span class="number">22</span>);</span><br><span class="line"><span class="built_in">NSArray</span> *proxyTypes = @[<span class="string">@"int"</span>, <span class="string">@"string"</span>, <span class="string">@"double"</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *param = <span class="built_in">NSDictionaryOfVariableBindings</span>(packId, userId, proxyTypes);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param);</span><br><span class="line"></span><br><span class="line">&lt;=&gt; 等价于</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *param = @&#123;</span><br><span class="line">    <span class="string">@"packId"</span> : packId,</span><br><span class="line">    <span class="string">@"userId"</span> : userId,</span><br><span class="line">    <span class="string">@"proxyTypes"</span> : @[<span class="string">@"int"</span>, <span class="string">@"string"</span>, <span class="string">@"double"</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数和消息代替performSelector："><a href="#函数和消息代替performSelector：" class="headerlink" title="函数和消息代替performSelector："></a>函数和消息代替<code>performSelector：</code></h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!obj) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"aMethod"</span>);</span><br><span class="line">IMP imp = [obj methodForSelector:selector];</span><br><span class="line"><span class="keyword">void</span> (*func)(<span class="keyword">id</span>, SEL) = (<span class="keyword">void</span> *)imp;</span><br><span class="line">func(obj, selector);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------- or ----------------------</span></span><br><span class="line">SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"aMethod"</span>);</span><br><span class="line">((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL))[obj methodForSelector:selector])(obj, selector);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------- or ----------------------</span></span><br><span class="line"><span class="comment">//代码块：((&lt;#ReturnClass#&gt; (*) (id, SEL, &lt;#ParameterClass, ...#&gt;))(void *)objc_msgSend) ((id)&lt;#self#&gt;, sel_registerName(&lt;#const char *str#&gt;), &lt;#Parameters, ...#&gt;);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">((<span class="keyword">void</span>(*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>, <span class="keyword">int</span>, <span class="built_in">BOOL</span>))objc_msgSend)(ot, sel_registerName(<span class="string">"A:B:C:"</span>), value_1, value_2, value_3);</span><br></pre></td></tr></table></figure><h3 id="生成随机小数-0-1之间"><a href="#生成随机小数-0-1之间" class="headerlink" title="生成随机小数(0-1之间)"></a>生成随机小数(0-1之间)</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define ARC4RANDOM_MAX      0x100000000</span></span><br><span class="line"><span class="keyword">double</span> val = ((<span class="keyword">double</span>)arc4random() / ARC4RANDOM_MAX);</span><br></pre></td></tr></table></figure><h3 id="正确使用NSArray和NSDictionary的方式"><a href="#正确使用NSArray和NSDictionary的方式" class="headerlink" title="正确使用NSArray和NSDictionary的方式"></a>正确使用<code>NSArray</code>和<code>NSDictionary</code>的方式</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ok</span></span><br><span class="line">  <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithArray:<span class="literal">nil</span>];</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"array = %@"</span>, array); <span class="comment">// output @[]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">NSMutableDictionary</span> *mutDict1 = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">  <span class="built_in">NSString</span> *nilString = <span class="literal">nil</span>;</span><br><span class="line">  <span class="comment">// crash</span></span><br><span class="line">  <span class="comment">//[mutDict1 setObject:nil forKey:@"key"];</span></span><br><span class="line">  <span class="comment">//mutDict1[nilString] = @"11000";</span></span><br><span class="line">  <span class="comment">// ok</span></span><br><span class="line">  [mutDict1 setValue:nilString forKeyPath:<span class="string">@"key"</span>];</span><br><span class="line">  <span class="comment">// ok</span></span><br><span class="line">  mutDict1[<span class="string">@"keykey"</span>] = <span class="literal">nil</span>;</span><br><span class="line">  <span class="comment">// ok</span></span><br><span class="line">  <span class="keyword">id</span> valueXX = [mutDict1 objectForKey:nilString];</span><br><span class="line">  <span class="comment">// ok</span></span><br><span class="line">  <span class="keyword">id</span> valueYY = mutDict1[nilString];</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"xxx = %@"</span>, valueXX); <span class="comment">// output null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ok</span></span><br><span class="line">  <span class="built_in">NSMutableDictionary</span> *mutDict2 = [<span class="built_in">NSMutableDictionary</span> dictionaryWithObjectsAndKeys:<span class="literal">nil</span>, <span class="string">@"key"</span>, <span class="literal">nil</span>];     <span class="comment">//output @[]</span></span><br><span class="line">  <span class="comment">// crash</span></span><br><span class="line">  <span class="comment">//mutDict2 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@"value", nil, nil];</span></span><br><span class="line">  <span class="comment">// crash </span></span><br><span class="line">  <span class="comment">//mutDict2 = @&#123;@"key" : nilString&#125;.mutableCopy;</span></span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, mutDict2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iOS-常用数学函数"><a href="#iOS-常用数学函数" class="headerlink" title="iOS 常用数学函数"></a>iOS 常用数学函数</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 三角函数 </span><br><span class="line">　　<span class="keyword">double</span> sin (<span class="keyword">double</span>);正弦 </span><br><span class="line">　　<span class="keyword">double</span> cos (<span class="keyword">double</span>);余弦 </span><br><span class="line">　　<span class="keyword">double</span> tan (<span class="keyword">double</span>);正切 </span><br><span class="line">　　<span class="number">2</span> 、反三角函数 </span><br><span class="line">　　<span class="keyword">double</span> asin (<span class="keyword">double</span>); 结果介于[-PI/<span class="number">2</span>, PI/<span class="number">2</span>] </span><br><span class="line">　　<span class="keyword">double</span> acos (<span class="keyword">double</span>); 结果介于[<span class="number">0</span>, PI] </span><br><span class="line">　　<span class="keyword">double</span> atan (<span class="keyword">double</span>); 反正切(主值), 结果介于[-PI/<span class="number">2</span>, PI/<span class="number">2</span>] </span><br><span class="line">　　<span class="keyword">double</span> atan2 (<span class="keyword">double</span>, <span class="keyword">double</span>); 反正切(整圆值), 结果介于[-PI, PI] </span><br><span class="line">　　<span class="number">3</span> 、双曲三角函数 </span><br><span class="line">　　<span class="keyword">double</span> sinh (<span class="keyword">double</span>); </span><br><span class="line">　　<span class="keyword">double</span> cosh (<span class="keyword">double</span>); </span><br><span class="line">　　<span class="keyword">double</span> tanh (<span class="keyword">double</span>); </span><br><span class="line">　　<span class="number">4</span> 、指数与对数 </span><br><span class="line">　　<span class="keyword">double</span> exp (<span class="keyword">double</span>);求取自然数e的幂 </span><br><span class="line">　　<span class="keyword">double</span> sqrt (<span class="keyword">double</span>);开平方 </span><br><span class="line">　　<span class="keyword">double</span> log (<span class="keyword">double</span>); 以e为底的对数 </span><br><span class="line">　　<span class="keyword">double</span> log10 (<span class="keyword">double</span>);以<span class="number">10</span>为底的对数 </span><br><span class="line">　　<span class="keyword">double</span> pow(<span class="keyword">double</span> x, <span class="keyword">double</span> y）;计算以x为底数的y次幂 </span><br><span class="line">　　<span class="keyword">float</span> powf(<span class="keyword">float</span> x, <span class="keyword">float</span> y); 功能与pow一致，只是输入与输出皆为浮点数 </span><br><span class="line">　　<span class="number">5</span> 、取整 </span><br><span class="line">　　<span class="keyword">double</span> ceil (<span class="keyword">double</span>); 取上整 </span><br><span class="line">　　<span class="keyword">double</span> floor (<span class="keyword">double</span>); 取下整 </span><br><span class="line">　　<span class="number">6</span> 、绝对值 </span><br><span class="line">　　<span class="keyword">double</span> fabs (<span class="keyword">double</span>);求绝对值 </span><br><span class="line">　　<span class="keyword">double</span> cabs(<span class="keyword">struct</span> complex znum) ;求复数的绝对值 </span><br><span class="line">　　<span class="number">7</span> 、标准化浮点数 </span><br><span class="line">　　<span class="keyword">double</span> frexp (<span class="keyword">double</span> f, <span class="keyword">int</span> *p); 标准化浮点数, f = x * <span class="number">2</span>^p, 已知f求x, p ( x介于[<span class="number">0.5</span>, <span class="number">1</span>] ) </span><br><span class="line">　　<span class="keyword">double</span> ldexp (<span class="keyword">double</span> x, <span class="keyword">int</span> p); 与frexp相反, 已知x, p求f </span><br><span class="line">　　<span class="number">8</span> 、取整与取余 </span><br><span class="line">　　<span class="keyword">double</span> modf (<span class="keyword">double</span>, <span class="keyword">double</span>*); 将参数的整数部分通过指针回传, 返回小数部分 </span><br><span class="line">　　<span class="keyword">double</span> fmod (<span class="keyword">double</span>, <span class="keyword">double</span>); 返回两参数相除的余数 </span><br><span class="line">　　<span class="number">9</span> 、其他 </span><br><span class="line">　　<span class="keyword">double</span> hypot(<span class="keyword">double</span> x, <span class="keyword">double</span> y);已知直角三角形两个直角边长度，求斜边长度 </span><br><span class="line">　　<span class="keyword">double</span> ldexp(<span class="keyword">double</span> x, <span class="keyword">int</span> exponent);计算x*(<span class="number">2</span>的exponent次幂) </span><br><span class="line">　　<span class="keyword">double</span> poly(<span class="keyword">double</span> x, <span class="keyword">int</span> degree, <span class="keyword">double</span> coeffs [] );计算多项式 </span><br><span class="line">　　nt matherr(<span class="keyword">struct</span> exception *e);数学错误计算处理程序</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="http://www.jianshu.com/p/4523eafb4cd4" target="_blank" rel="noopener">iOS小技巧总结</a>  </li><li><a href="http://www.tuicool.com/articles/2Ynmui2" target="_blank" rel="noopener">多年iOS开发经验总结(二)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UITableView-plain样式下，让section跟随滑动&quot;&gt;&lt;a href=&quot;#UITableView-plain样式下，让section跟随滑动&quot; class=&quot;headerlink&quot; title=&quot;UITableView plain样式下，让sect
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Tips" scheme="http://yoursite.com/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>使用Gemfile对项目依赖的CocoaPods进行版本控制</title>
    <link href="http://yoursite.com/2018/08/28/%E4%BD%BF%E7%94%A8Gemfile%E5%AF%B9%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%9A%84CocoaPods%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2018/08/28/使用Gemfile对项目依赖的CocoaPods进行版本控制/</id>
    <published>2018-08-28T08:38:23.000Z</published>
    <updated>2018-08-28T12:00:32.819Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Q："><a href="#Q：" class="headerlink" title="Q："></a>Q：</h4><p>多人协同开发同一项目时，每个人电脑上的<code>CocoaPods</code> 版本可能不尽相同，这样当某人重新执行<code>pod install</code> 操作后，有可能导致其他人打开项目时报错。对于这种问题我们有解决办法吗？</p><h4 id="A："><a href="#A：" class="headerlink" title="A："></a>A：</h4><p>有， <code>Gemfile</code>可以帮我们以非常简单的方式解决这个问题。</p><hr><h4 id="Gemfile-Usage"><a href="#Gemfile-Usage" class="headerlink" title="Gemfile Usage"></a>Gemfile Usage</h4><p>先贴一下官方文档 <a href="https://guides.cocoapods.org/using/a-gemfile.html" target="_blank" rel="noopener">Using a Gemfile</a> </p><h5 id="大致用法："><a href="#大致用法：" class="headerlink" title="大致用法："></a>大致用法：</h5><ol><li><p>进入到工程目录下，调用<code>bundle init</code>命令，会创建一个<code>Gemfile</code>文件，此操作类似于<code>pod init</code>;</p></li><li><p>编辑刚才创建的<code>Gemfile</code>文件，在里面添加<code>gem &quot;cocoapods&quot;, &#39;1.5.0&#39;</code>，这样就指定了<code>CocoaPods</code>的版本了；在国内建议修改<code>source</code>源为：<code>source &quot;https://gems.ruby-china.org&quot;</code>，否则更新会很慢。</p></li><li><p>最后执行<code>bundle exec pod update</code> 或者<code>bundle exec pod install</code>命令即可，这样就会使用<code>Gemfile</code>内的版本安装了，不受你电脑上的<code>cocoapods</code>版本影响，比如你电脑上是<code>1.5.0</code>版本的，也可以用<code>1.4.0</code>版本的<code>pod</code>安装；这里需要说明的一点是，如果你直接调用<code>pod install</code> 或者 <code>pod uodate</code>，则默认使用的还是你本机上的<code>cocoapods</code>版本。</p></li></ol><p>为了方便使用，可以把以上命令封装到一个脚本中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!bin/sh</span></span><br><span class="line">rm -rf Podfile.lock</span><br><span class="line">rm -rf Pods</span><br><span class="line"></span><br><span class="line">bundle install</span><br><span class="line">bundle exec pod update --no-repo-update</span><br></pre></td></tr></table></figure><p>以上脚本可以根据需要自行修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Q：&quot;&gt;&lt;a href=&quot;#Q：&quot; class=&quot;headerlink&quot; title=&quot;Q：&quot;&gt;&lt;/a&gt;Q：&lt;/h4&gt;&lt;p&gt;多人协同开发同一项目时，每个人电脑上的&lt;code&gt;CocoaPods&lt;/code&gt; 版本可能不尽相同，这样当某人重新执行&lt;code&gt;pod 
      
    
    </summary>
    
    
      <category term="cocoapods" scheme="http://yoursite.com/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Code Tips</title>
    <link href="http://yoursite.com/2018/08/17/Code-Tips/"/>
    <id>http://yoursite.com/2018/08/17/Code-Tips/</id>
    <published>2018-08-16T16:32:47.000Z</published>
    <updated>2018-08-28T11:28:37.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>C</code> &amp;&amp; <code>Objective-C</code>代码技巧 </p></blockquote><hr><h4 id="1-GNU-C的赋值扩展："><a href="#1-GNU-C的赋值扩展：" class="headerlink" title="1. GNU C的赋值扩展："></a>1. <code>GNU C</code>的赋值扩展：</h4><pre><code>即使用`({...})`的形式。这种形式的语句可以类似很多脚本语言，在顺次执行之后，会将最后一次的表达式的值作为返回值。</code></pre><blockquote><p>注意：这个不是懒加载</p></blockquote>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RETURN_VALUE_RECEIVER = &#123;(</span><br><span class="line">     <span class="comment">// do whatever you want</span></span><br><span class="line">     ...</span><br><span class="line">     RETURN_VALUE; <span class="comment">// 返回值</span></span><br><span class="line">)&#125;;</span><br></pre></td></tr></table></figure><p>   <a href="https://github.com/romaonthego/REMenu" target="_blank" rel="noopener">REMenu</a> 这个开源库中就使用了这种语法，如下：</p>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_titleLabel = (&#123;</span><br><span class="line">   <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:titleFrame];</span><br><span class="line">   label.isAccessibilityElement = <span class="literal">NO</span>;</span><br><span class="line">   label.contentMode = <span class="built_in">UIViewContentModeCenter</span>;</span><br><span class="line">   label.textAlignment = (<span class="built_in">NSInteger</span>)<span class="keyword">self</span>.item.textAlignment == <span class="number">-1</span> ? <span class="keyword">self</span>.menu.textAlignment : <span class="keyword">self</span>.item.subtitleTextAlignment;</span><br><span class="line">   label.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">   label.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleWidth</span>;</span><br><span class="line">   label;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>   使用这种语法的其中一个优点是结构鲜明紧凑，而且由于不用担心块里面的变量名污染外面变量名的问题。</p><h4 id="2-case语句中使用范围表达式："><a href="#2-case语句中使用范围表达式：" class="headerlink" title="2. case语句中使用范围表达式："></a>2. <code>case</code>语句中使用范围表达式：</h4><blockquote><p><code>GCC</code>对<code>C11</code>标准的语法扩展</p></blockquote><p>   比如，<code>case 1 ... 5</code> 就表示值如果在 <code>1~5</code> 的范围内则满足条件。<br>   这里，省略号 <code>...</code> 就作为一个范围操作符，<strong>其左右两个操作数之间至少要用一个空白符进行分割</strong>，如果写成 <code>1...5</code> 这种形式会引发词法解析错误。范围操作符的操作数可以是任一整数类型，包括字符类型。<br>   另外，范围操作符的做操作数的值应该小于或等于右操作数，否则该范围表达式就会是一个空条件范围，永远不成立。</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">        <span class="comment">// 这条case语句是合法的，并且与case 1等效 </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> ... <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这条case语句中的范围操作符的左操作数⼤于右操作数， </span></span><br><span class="line">        <span class="comment">// 因此它是⼀个空条件范围，这条case语句下的逻辑永远不会被执⾏ </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> ... <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Hello, world!"</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使⽤const修饰的对象也可作为范围操作符的操作数 </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span> ... c:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Wow!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">'A'</span>; </span><br><span class="line">    <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">        <span class="comment">// 从'A'到'Z'的ASCII码范围 </span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span> ... <span class="string">'Z'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The letter is: %c\n"</span>, ch);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从'0'到'9'的ASCII码范围 </span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span> ... <span class="string">'9'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The digit is: %c\n"</span>, ch);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-使用-auto-type做类型推导："><a href="#3-使用-auto-type做类型推导：" class="headerlink" title="3. 使用__auto_type做类型推导："></a>3. 使用<code>__auto_type</code>做类型推导：</h4><blockquote><p><code>GCC</code>对<code>C11</code>标准的语法扩展</p></blockquote>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> var auto</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> let auto const</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> var __auto_type</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> let const __auto_type</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><pre><code>例如：</code></pre>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let block = ^<span class="built_in">NSString</span> *(<span class="built_in">NSString</span> *name, <span class="built_in">NSUInteger</span> age) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ + %ld"</span>, name, age];</span><br><span class="line">&#125;;</span><br><span class="line">let result = block(<span class="string">@"foo"</span>, <span class="number">100</span>);  <span class="comment">// no warning</span></span><br></pre></td></tr></table></figure><h4 id="4-结构体的初始化："><a href="#4-结构体的初始化：" class="headerlink" title="4. 结构体的初始化："></a>4. 结构体的初始化：</h4>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不加(CGRect)强转也不会warning</span></span><br><span class="line">GRect rect1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">CGRect</span> rect2 = &#123;.origin.x=<span class="number">5</span>, .size=&#123;<span class="number">10</span>, <span class="number">10</span>&#125;&#125;; <span class="comment">// &#123;5, 0, 10, 10&#125;</span></span><br><span class="line"><span class="built_in">CGRect</span> rect3 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// &#123;1, 2, 0, 0&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-数组的下标初始化："><a href="#5-数组的下标初始化：" class="headerlink" title="5. 数组的下标初始化："></a>5. 数组的下标初始化：</h4>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> numbers[] = &#123;</span><br><span class="line">    [<span class="number">1</span>] = <span class="number">3</span>,</span><br><span class="line">    [<span class="number">2</span>] = <span class="number">2</span>,</span><br><span class="line">    [<span class="number">3</span>] = <span class="number">1</span>,</span><br><span class="line">    [<span class="number">5</span>] = <span class="number">12306</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// &#123;0, 3, 2, 1, 0, 12306&#125;</span></span><br></pre></td></tr></table></figure><pre><code>**这个特性可以用来做枚举值和字符串的映射**</code></pre>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, Type)&#123;</span><br><span class="line">    Type1,</span><br><span class="line">    Type2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> *TypeNameMapping[] = &#123;</span><br><span class="line">    [Type1] = <span class="string">@"Type1"</span>,</span><br><span class="line">    [Type2] = <span class="string">@"Type2"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>又如 `UITableView+FDIndexPathHeightCache`中的例子：</code></pre>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All methods that trigger height cache's invalidation</span></span><br><span class="line">SEL selectors[] = &#123;</span><br><span class="line">    <span class="keyword">@selector</span>(reloadData),</span><br><span class="line">    <span class="keyword">@selector</span>(insertSections:withRowAnimation:),</span><br><span class="line">    <span class="keyword">@selector</span>(deleteSections:withRowAnimation:),</span><br><span class="line">    <span class="keyword">@selector</span>(reloadSections:withRowAnimation:),</span><br><span class="line">    <span class="keyword">@selector</span>(moveSection:toSection:),</span><br><span class="line">    <span class="keyword">@selector</span>(insertRowsAtIndexPaths:withRowAnimation:),</span><br><span class="line">    <span class="keyword">@selector</span>(deleteRowsAtIndexPaths:withRowAnimation:),</span><br><span class="line">    <span class="keyword">@selector</span>(reloadRowsAtIndexPaths:withRowAnimation:),</span><br><span class="line">    <span class="keyword">@selector</span>(moveRowAtIndexPath:toIndexPath:)</span><br><span class="line">&#125;;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSUInteger</span> index = <span class="number">0</span>; index &lt; <span class="keyword">sizeof</span>(selectors) / <span class="keyword">sizeof</span>(SEL); ++index) &#123;</span><br><span class="line">    SEL originalSelector = selectors[index];</span><br><span class="line">    SEL swizzledSelector = <span class="built_in">NSSelectorFromString</span>([<span class="string">@"fd_"</span> stringByAppendingString:<span class="built_in">NSStringFromSelector</span>(originalSelector)]);</span><br><span class="line">    Method originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, swizzledSelector);</span><br><span class="line">    method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-自带提示的keypath宏："><a href="#6-自带提示的keypath宏：" class="headerlink" title="6. 自带提示的keypath宏："></a>6. 自带提示的<code>keypath</code>宏：</h4>   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define keypath2(OBJ, PATH) \</span></span><br><span class="line"> (((<span class="keyword">void</span>)(<span class="literal">NO</span> &amp;&amp; ((<span class="keyword">void</span>)OBJ.PATH, <span class="literal">NO</span>)), <span class="meta"># PATH))</span></span><br></pre></td></tr></table></figure><h4 id="7-逗号表达式："><a href="#7-逗号表达式：" class="headerlink" title="7. 逗号表达式："></a>7. 逗号表达式：</h4><pre><code>逗号表达式取后值，但前值的表达式参与运算，可用`void`忽略编译器警告</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = ((void)(1+2), 2); // a == 2</span><br></pre></td></tr></table></figure><pre><code>于是上面的`keypath`宏的输出结果是`#PATH`也就是一个`c`字符串 </code></pre><h4 id="8-C函数重载标示符："><a href="#8-C函数重载标示符：" class="headerlink" title="8. C函数重载标示符："></a>8. <code>C</code>函数重载标示符：</h4><blockquote><p><a href="https://github.com/rickytan/RTRootNavigationController/blob/master/RTRootNavigationController/Classes/RTRootNavigationController.m" target="_blank" rel="noopener">RTRootNavigationController</a> 中有用到这个技巧</p></blockquote>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__attribute((overloadable)) NSInteger ZD_SumFunc(NSInteger a, NSInteger b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">__attribute((overloadable)) NSInteger ZD_SumFunc(NSInteger a, NSInteger b, NSInteger c) &#123;</span><br><span class="line">    return a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ol><li><p><a href="http://blog.sunnyxx.com/2014/08/02/objc-weird-code/" target="_blank" rel="noopener">objc非主流代码技巧</a></p></li><li><p><a href="https://pspdfkit.com/blog/2017/even-swiftier-objective-c/" target="_blank" rel="noopener">Even Swiftier Objective-C</a></p></li><li><p><a href="http://www.jb51.net/books/620682.html" target="_blank" rel="noopener">《C语言编程魔法书》</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;Objective-C&lt;/code&gt;代码技巧 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1-GNU-C的赋值扩展：&quot;&gt;&lt;a href=&quot;#1-GNU-C的赋值扩展
      
    
    </summary>
    
    
      <category term="Tips" scheme="http://yoursite.com/tags/Tips/"/>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Block捕获外部变量原理探究</title>
    <link href="http://yoursite.com/2018/08/17/Block%E6%8D%95%E8%8E%B7%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/08/17/Block捕获外部变量原理探究/</id>
    <published>2018-08-16T16:28:03.000Z</published>
    <updated>2018-08-28T11:25:13.173Z</updated>
    
    <content type="html"><![CDATA[<p>在此之前先介绍一下<strong>block 基本语法</strong>：</p><p><img src="http://olmn3rwny.bkt.clouddn.com/20170330193208_8X7KiF_Screenshot.jpeg" alt="block语法"></p><details open><br><summary>Block Syntax Code</summary><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Block as a local variable</span></span><br><span class="line">returnType (^blockName)(parameterTypes) = ^returnType(parameters) &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block as a property</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) returnType (^blockName)(parameterTypes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block as a method parameter</span></span><br><span class="line">- (<span class="keyword">void</span>)someMethodThatTakesABlock:(returnType (^)(parameterTypes))blockName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block as an argument to a method call</span></span><br><span class="line">[someObject someMethodThatTakesABlock: ^returnType (parameters) &#123;...&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block as typedef</span></span><br><span class="line"><span class="keyword">typedef</span> returnType (^TypeName)(parameterTypes);</span><br><span class="line">TypeName blockName = ^returnType(parameters) &#123;...&#125;;</span><br></pre></td></tr></table></figure><br><br></details><p>对<code>Object-C</code>文件执行 <code>xcrun -sdk iphonesimulator clang -rewrite-objc fileName.m</code> 操作来获取伪代码，仅供技术探究。</p><p>先把<code>__block_impl</code>结构体拿出来放在最前面，最终block调用时都会被强转成这种类型，下面好多地方会用到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags;</span><br><span class="line">  <span class="keyword">int</span> Reserved;</span><br><span class="line">  <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>isa指针：指向一个类对象，在非GC模式下有三种类型：_NSConcreteStackBlock、_NSConcreteGlobalBlock、_NSConcreteMallocBlock；</li><li>Flags：block的负载信息（引用计数和类型信息），按位存储；</li><li>Reserved：保留变量；</li><li>FuncPtr：指向block函数地址的指针。</li><li>descriptor：是用于描述当前这个 block 的附加信息的，包括结构体的大小，需要 capture 和 dispose 的变量列表等。结构体大小需要保存是因为，每个 block 因为会 capture 一些变量，这些变量会加到 __main_block_impl_0 这个结构体中，使其体积变大。</li></ul></blockquote><p>接下来进入正题：</p><blockquote><p>P.S：以下<code>Objective-C</code>的代码都处在ARC环境下</p></blockquote><h3 id="1、不加-block的情况"><a href="#1、不加-block的情况" class="headerlink" title="1、不加__block的情况:"></a>1、不加__block的情况:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSMutableArray</span> *mutArr = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">[mutArr addObject:@<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">block();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>clang</code>操作后的<code>C++</code>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义block的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  NSMutableArray *mutArr;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, NSMutableArray *_mutArr, <span class="keyword">int</span> flags=<span class="number">0</span>) : mutArr(_mutArr) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下为调用`block`时执行的方法</span></span><br><span class="line"><span class="comment">// 此`mutArr`是在最初定义`block`时 为结构体传进去的局部变量`mutArr`的值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="comment">// bound by copy:这里的注释表示，block对它引用的局部变量做了只读拷贝，也就是说block引用的是局部变量的副本。</span></span><br><span class="line">  NSMutableArray *mutArr = __cself-&gt;mutArr; <span class="comment">// bound by copy</span></span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">void</span> (*)(id, SEL, ObjectType))(<span class="keyword">void</span> *)objc_msgSend)((id)mutArr, sel_registerName(<span class="string">"addObject:"</span>), (id)((NSNumber *(*)(Class, SEL, <span class="keyword">int</span>))(<span class="keyword">void</span> *)objc_msgSend)(objc_getClass(<span class="string">"NSNumber"</span>), sel_registerName(<span class="string">"numberWithInt:"</span>), <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block的copy函数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;mutArr, (<span class="keyword">void</span>*)src-&gt;mutArr, <span class="number">3</span><span class="comment">/*BLOCK_FIELD_IS_OBJECT*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;</span><br><span class="line">_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;mutArr, <span class="number">3</span><span class="comment">/*BLOCK_FIELD_IS_OBJECT*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line"> </span><br><span class="line">  NSMutableArray *mutArr = ((NSMutableArray *(*)(id, SEL))(<span class="keyword">void</span> *)objc_msgSend)((id)objc_getClass(<span class="string">"NSMutableArray"</span>), sel_registerName(<span class="string">"array"</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 可以看出block变量实际上就是一个指向结构体`__main_block_impl_0`的指针,而结构体的第三个元素是局部变量mutArr的值</span></span><br><span class="line">  <span class="comment">// 此处捕获的直接就是`mutArr`局部变量</span></span><br><span class="line">  <span class="keyword">void</span>(*block)() = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, mutArr, <span class="number">570425344</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 下面调用`block`的方法实质其实是: 指向结构体的指针`block`访问其`FuncPtr`元素(即,在定义block时为`FuncPtr`元素传进去的`__main_block_func_0`方法)</span></span><br><span class="line">  ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="2、添加-block的情况"><a href="#2、添加-block的情况" class="headerlink" title="2、添加__block的情况:"></a>2、添加__block的情况:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line">__block <span class="built_in">NSMutableArray</span> *mutArr = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">[mutArr addObject:@<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[mutArr addObject:<span class="string">@"hello"</span>];</span><br><span class="line"></span><br><span class="line">block();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>clang</code>后的<code>C++</code>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由下面的代码可知: `__block`的作用就是定义一个新的结构体来包裹原来的变量</span></span><br><span class="line"><span class="comment">// 定义一个保存变量的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_mutArr_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">  __Block_byref_mutArr_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">void</span> (*__Block_byref_id_object_copy)(<span class="keyword">void</span>*, <span class="keyword">void</span>*);</span><br><span class="line"> <span class="keyword">void</span> (*__Block_byref_id_object_dispose)(<span class="keyword">void</span>*);</span><br><span class="line"> NSMutableArray *mutArr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// block 结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="comment">// 包含捕获的局部变量的结构体指针</span></span><br><span class="line">  __Block_byref_mutArr_0 *mutArr; <span class="comment">// by ref</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, __Block_byref_mutArr_0 *_mutArr, <span class="keyword">int</span> flags=<span class="number">0</span>) : mutArr(_mutArr-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在block内部对`mutArr`操作 (block回调时执行的函数)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="comment">// 拿到 包含捕获的局部变量 的结构体指针</span></span><br><span class="line">   __Block_byref_mutArr_0 *mutArr = __cself-&gt;mutArr; <span class="comment">// bound by ref</span></span><br><span class="line">   <span class="comment">// 通过上面的结构体指针一步步拿到`mutArr`数组</span></span><br><span class="line">   ((<span class="keyword">void</span> (*)(id, SEL, ObjectType))(<span class="keyword">void</span> *)objc_msgSend)((id)(mutArr-&gt;__forwarding-&gt;mutArr), sel_registerName(<span class="string">"addObject:"</span>), (id)((NSNumber *(*)(Class, SEL, <span class="keyword">int</span>))(<span class="keyword">void</span> *)objc_msgSend)(objc_getClass(<span class="string">"NSNumber"</span>), sel_registerName(<span class="string">"numberWithInt:"</span>), <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;mutArr, (<span class="keyword">void</span>*)src-&gt;mutArr, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_dispose((<span class="keyword">void</span>*)src-&gt;mutArr, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line"></span><br><span class="line">  __attribute__((__blocks__(byref))) __Block_byref_mutArr_0 mutArr = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_mutArr_0 *)&amp;mutArr, <span class="number">33554432</span>, <span class="keyword">sizeof</span>(__Block_byref_mutArr_0), __Block_byref_id_object_copy_131, __Block_byref_id_object_dispose_131, ((NSMutableArray *(*)(id, SEL))(<span class="keyword">void</span> *)objc_msgSend)((id)objc_getClass(<span class="string">"NSMutableArray"</span>), sel_registerName(<span class="string">"array"</span>))&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 与不加__block差不多,`block`变量还是一个指向`__main_block_impl_0`结构体的指针,区别在于第三个参数变了. 第三个参数是包含局部变量`mutArr`的结构体指针.</span></span><br><span class="line">  <span class="comment">// 即block捕获的是持有`mutArr`的结构体指针</span></span><br><span class="line">  <span class="keyword">void</span>(*block)() = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_mutArr_0 *)&amp;mutArr, <span class="number">570425344</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在block外部对`mutArr`操作</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 此处对`mutArr`数组对象进行操作,获取`mutArr`也是和`block`内部的获取方法一样,</span></span><br><span class="line"><span class="comment">// 都是通过持有`mutArr`的结构体一步步获取到`mutArr`数组,</span></span><br><span class="line"><span class="comment">// 所以,在block内外,操作的都是同一个`mutArr`对象.都是通过包含`mutArr`对象的`__Block_byref_mutArr_0`结构体对其进行间接操作处理的</span></span><br><span class="line"><span class="comment">// 这也就是为什么添加`__block`后还能改变原来的对象的原因</span></span><br><span class="line">  ((<span class="keyword">void</span> (*)(id, SEL, ObjectType))(<span class="keyword">void</span> *)objc_msgSend)((id)(mutArr.__forwarding-&gt;mutArr), sel_registerName(<span class="string">"addObject:"</span>), (id)(NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_b07809_mi_0);</span><br><span class="line"></span><br><span class="line">  ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p>虽然NSMutableArray前面加不加__block，都不会影响往数组中添加数据，但是当在block中给<code>mutArr</code>重新赋值的时候就有区别了。<br><img src="http://olmn3rwny.bkt.clouddn.com/20180828184027_Pll0EO_blockTest1.jpeg" alt="blockTest1"><br>如果你想对<code>mutArr</code>变量重新赋值一个新的<code>array</code>实例，改变原变量的指针，那么不加<code>_block</code>是不行的，但是如果只是单纯的<code>add</code>一个数据进去实际上改变的是变量所指的那个<code>mutArr</code>内存区域，这样是没有区别的。</p><h3 id="3、静态变量"><a href="#3、静态变量" class="headerlink" title="3、静态变量:"></a>3、静态变量:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *myString = <span class="string">@"111"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">[myString stringByAppendingString:<span class="string">@"222"</span>];</span><br><span class="line"></span><br><span class="line">myString = <span class="string">@"444"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myString);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[myString stringByAppendingString:<span class="string">@"333"</span>];</span><br><span class="line"></span><br><span class="line">block();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>clang</code>之后的<code>C++</code>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="comment">// 注意这里, 外面的静态变量被捕获了,不过捕获的是对象的指针</span></span><br><span class="line">  NSString **myString;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, NSString **_myString, <span class="keyword">int</span> flags=<span class="number">0</span>) : myString(_myString) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  NSString **myString = __cself-&gt;myString; <span class="comment">// bound by copy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过对`myString`指针进行取值操作(*myString),拿到 myString</span></span><br><span class="line">   ((NSString *(*)(id, SEL, NSString *))(<span class="keyword">void</span> *)objc_msgSend)((id)(*myString), sel_registerName(<span class="string">"stringByAppendingString:"</span>), (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_dac7fc_mi_1);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 由下面的伪代码可以看出,由于`myString`是指针,所以通过`*`操作来获取到原来的变量,</span></span><br><span class="line"><span class="comment">// 然后再对其进行重新赋值操作</span></span><br><span class="line">(*myString) = (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_121621_mi_2;</span><br><span class="line"></span><br><span class="line">   NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_dac7fc_mi_2, (*myString));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;</span><br><span class="line">  _Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;myString, (<span class="keyword">void</span>*)src-&gt;myString, <span class="number">3</span><span class="comment">/*BLOCK_FIELD_IS_OBJECT*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;</span><br><span class="line">  _Block_object_dispose((<span class="keyword">void</span>*)src-&gt;myString, <span class="number">3</span><span class="comment">/*BLOCK_FIELD_IS_OBJECT*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> NSString *myString = (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_dac7fc_mi_0;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// block捕获的是静态变量的指针</span></span><br><span class="line">  <span class="keyword">void</span>(*block)() = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, &amp;myString, <span class="number">570425344</span>));</span><br><span class="line"></span><br><span class="line">  ((NSString *(*)(id, SEL, NSString *))(<span class="keyword">void</span> *)objc_msgSend)((id)myString, sel_registerName(<span class="string">"stringByAppendingString:"</span>), (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_dac7fc_mi_3);</span><br><span class="line"></span><br><span class="line">  ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="4、全局变量"><a href="#4、全局变量" class="headerlink" title="4、全局变量:"></a>4、全局变量:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *myString = <span class="string">@"111"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">[myString stringByAppendingString:<span class="string">@"222"</span>];</span><br><span class="line"></span><br><span class="line">myString = <span class="string">@"444"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myString);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[myString stringByAppendingString:<span class="string">@"333"</span>];</span><br><span class="line"></span><br><span class="line">block();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>clang</code>操作执行之后的<code>C++</code>伪代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">NSString *myString = (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_938f32_mi_0;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block结构体并没有捕获全局变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面三个函数都是在用到全局变量`myString`的时候直接从内存去获取</span></span><br><span class="line">   ((NSString *(*)(id, SEL, NSString *))(<span class="keyword">void</span> *)objc_msgSend)((id)myString, sel_registerName(<span class="string">"stringByAppendingString:"</span>), (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_938f32_mi_1);</span><br><span class="line"></span><br><span class="line">   myString = (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_938f32_mi_2;</span><br><span class="line"></span><br><span class="line">   NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_938f32_mi_3, myString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>(*block)() = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line"></span><br><span class="line">  ((NSString *(*)(id, SEL, NSString *))(<span class="keyword">void</span> *)objc_msgSend)((id)myString, sel_registerName(<span class="string">"stringByAppendingString:"</span>), (NSString *)&amp;__NSConstantStringImpl__var_folders_4t_ldgq93v932g220vwkl7c1fk40000gn_T_BlockTest_938f32_mi_4);</span><br><span class="line"></span><br><span class="line">  ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ol><li><p>局部变量：不加<code>__block</code>，block内部捕获的是局部变量的值，而且如果局部变量是数值类型（比如int）不会有<code>__main_block_copy_0</code> 和 <code>__main_block_dispose_0</code> 两个函数，如果是引用类型（比如NSArray）则会有这个函数，说明对于值类型变量是直接定义新变量并赋值相同，对于引用类型变量是定义一个新变量并copy它。</p></li><li><p>局部变量：而添加<code>__block</code>后,原来的局部变量会被放入到一个<code>__Block_byref_变量名_0</code>类型的结构体中，然后block内部当捕获局部变量时其实是捕获的是这个结构体的指针，当获取原来的局部变量时(不管是在block内还是block外)，其实都是通过这个结构体或者这个结构体指针来拿到原来的局部变量，再进行操作的。这也就是为什么添加<code>__block</code>后可以对block内捕获的局部变量进行重新赋值等操作。</p></li><li><p>静态变量：block直接捕获的是静态变量的指针，前后都是对指针进行操作。</p></li><li><p>全局变量（或 全局静态变量）：block并没有捕获变量，而是在结构体的执行方法中直接使用了全局变量，是在执行时才去取值，一直都是获取变量的最新值。而且细心点我们可以发现，对于没有捕获全局变量的block中也没有<code>__main_block_copy_0</code> 和 <code>__main_block_dispose_0</code> 两个函数（用于在调用前后修改相应变量的引用计数），即没有发生copy操作。</p></li><li><p>在ARC环境下：在单独声明block的时候，block还是会在栈上的；当block作为参数返回的时候，block也会自动被移到堆上；在ARC下，只要指针过一下strong指针，或者由函数返回都会把block移动到堆上。</p><blockquote><p><code>__main_block_copy_0</code> 中的 <code>_Block_object_assign</code> 函数相当于<code>retain</code>实例方法，使 block 的成员变量持有捕获到的对象。 <code>__main_block_dispose_0</code> 中的 <code>_Block_object_dispose</code> 函数相当于 <code>release</code> 实例方法，释放 block 的成员变量持有的对象。</p></blockquote><p> Objective-C 中的三中block <code>__NSStackBlock__</code>、<code>__NSMallocBlock</code>、<code>__NSGloballBlock</code> 会在下面的情况下出现：</p></li></ol><table><thead><tr><th></th><th style="text-align:center">ARC</th><th>非ARC</th></tr></thead><tbody><tr><td>捕获外部变量</td><td style="text-align:center"><code>__NSStackBlock__</code> <br> <code>__NSMallocBlock__</code></td><td><code>__NSStackBlock__</code></td></tr><tr><td>未捕获外部变量</td><td style="text-align:center"><code>__NSGlobalBlock__</code></td><td><code>__NSGlobalBlock__</code></td></tr></tbody></table><ul><li>在 ARC 中，捕获了外部变量的block的类型会是<code>__NSStackBlock__</code> 或者 <code>__NSMallocBlock__</code>，如果 block 被赋值给了某个变量，在这个过程中会执行<code>_Block_copy</code>，将原有的 <code>__NSStackBlock__</code> 变成 <code>__NSMallocBlock__</code>；但是如果 block 没有被赋值给某个变量，那它的类型就是<code>__NSStackBlock__</code>；没有捕获外部变量的 block 的类则是 <code>__NSGlobalBlock__</code> ，既不在栈上，也不在堆上，它类似于 C 语言函数一样，会在代码段中。</li><li>在非 ARC 中，捕获了外部变量的 block 的类会是<code>__NSStackBlock__</code>，放置在栈上；没有捕获外部变量的 block 与 ARC 环境下的情况是相同的，类型是<code>__NSGlobalBlock__</code>，放置在代码段中。</li></ul><hr><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h3><ol><li><a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="noopener">谈Objective-C Block的实现</a></li><li><a href="http://draveness.me/block-retain-object" target="_blank" rel="noopener">iOS中的block是如何持有对象的</a></li><li><a href="http://www.jianshu.com/p/a5dd014edb13" target="_blank" rel="noopener">深入分析Objective-C block、weakself、strongself实现原理</a></li><li><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank" rel="noopener">block-copy</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在此之前先介绍一下&lt;strong&gt;block 基本语法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://olmn3rwny.bkt.clouddn.com/20170330193208_8X7KiF_Screenshot.jpeg&quot; alt=&quot;block
      
    
    </summary>
    
    
      <category term="源码分析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Block" scheme="http://yoursite.com/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>解读ReactiveCocoa中的部分函数</title>
    <link href="http://yoursite.com/2018/08/13/%E8%A7%A3%E8%AF%BBReactiveCocoa%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/08/13/解读ReactiveCocoa中的部分函数/</id>
    <published>2018-08-13T15:11:19.000Z</published>
    <updated>2018-08-28T11:27:56.908Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、bind、flattenMap和map"><a href="#一、bind、flattenMap和map" class="headerlink" title="一、bind、flattenMap和map"></a>一、bind、flattenMap和map</h4><blockquote><p>冷信号与热信号：</p><ol><li><p>Hot Observable是主动的，尽管你并没有订阅事件，但是它会时刻推送，就像鼠标移动；而Cold Observable是被动的，只有当你订阅的时候，它才会发布消息。</p><ol start="2"><li>Hot Observable可以有多个订阅者，是一对多，集合可以与订阅者共享信息；而Cold Observable只能一对一，当有不同的订阅者，消息是重新完整发送。</li><li>冷信号可以理解为<code>点播</code>，每次订阅都从头开始；热信号可以理解为<code>直播</code>，订阅时从当前的状态开始；</li></ol></li></ol></blockquote><hr><blockquote><ul><li><code>map</code>和<code>flatten</code>是基于<code>flattenMap</code>,而<code>flattenMap</code>是基于<code>bind:</code>,所以在此之前先来看看<code>bind</code>函数。</li></ul></blockquote><h5 id="1-bind"><a href="#1-bind" class="headerlink" title="1. bind:"></a>1. bind:</h5><ul><li>具体来看源码（为方便理解，去掉了源代码中<code>RACDisposable</code>, <code>@synchronized</code>, <code>@autoreleasepool</code>相关代码)。当新信号<code>N</code>被外部订阅时，会进入信号<code>N</code>的<code>didSubscribeBlock</code> (1)，之后订阅原信号<code>O</code> (2)，当原信号<code>O</code>有值输出后就用<code>bind</code>函数传入的<code>bindBlock</code>将其变换成中间信号<code>M</code> (3), 并马上对其进行订阅(4)，最后将中间信号<code>M</code>的输出作为新信号<code>N</code>的输出 (5)。即：当新生成的信号被订阅时，源信号也会立即被订阅。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (RACSignal *)bind:(RACStreamBindBlock (^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    <span class="keyword">return</span> [RACSignal createSignal:^(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123; <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">        RACStreamBindBlock bindingBlock = block(); <span class="comment">// (MARK:此处执行block回调,生成一个bindingBlock)</span></span><br><span class="line"></span><br><span class="line">        [<span class="keyword">self</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;  <span class="comment">// (2)</span></span><br><span class="line">            <span class="built_in">BOOL</span> stop = <span class="literal">NO</span>;</span><br><span class="line">            <span class="keyword">id</span> middleSignal = bindingBlock(x, &amp;stop);  <span class="comment">// (3) map与flatten结果不同，问题就出在这里</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (middleSignal != <span class="literal">nil</span>) &#123;</span><br><span class="line">                RACDisposable *disposable = [middleSignal subscribeNext:^(<span class="keyword">id</span> x) &#123; <span class="comment">// (4)</span></span><br><span class="line">                    [subscriber sendNext:x];  <span class="comment">// (5)</span></span><br><span class="line">                &#125; error:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">                    [subscriber sendError:error];</span><br><span class="line">                &#125; completed:^&#123;</span><br><span class="line">                    [subscriber sendCompleted];</span><br><span class="line">                &#125;];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; error:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">            [subscriber sendError:error];</span><br><span class="line">        &#125; completed:^&#123;</span><br><span class="line">            [subscriber sendCompleted];</span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-flattenMap"><a href="#2-flattenMap" class="headerlink" title="2. flattenMap:"></a>2. flattenMap:</h5><p><code>flattenMap</code>其实就是对<code>bind:</code>方法进行了一些安全检查，它最终返回的是<code>bindBlock</code>执行后生成的那个中间<code>signal</code>又被订阅后传递出的值的信号，而<code>map</code>方法返回的是<code>bindBlock</code>的执行结果生成的那个信号，没有再加工处理（即被订阅，再发送值）</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)flattenMap:(RACStream * (^)(<span class="keyword">id</span> value))block &#123;</span><br><span class="line">    Class <span class="keyword">class</span> = <span class="keyword">self</span>.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> bind:^&#123;</span><br><span class="line">        <span class="comment">/// @return 返回的是RACStreamBindBlock</span></span><br><span class="line">        <span class="comment">/// @discussion</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">/// 跟`bind：`方法中的代码对应起来如下：</span></span><br><span class="line">        <span class="comment">/// BOOL stop = NO;</span></span><br><span class="line">         <span class="comment">/// id middleSignal = bindingBlock(x, &amp;stop);</span></span><br><span class="line">         <span class="comment">///</span></span><br><span class="line">         <span class="comment">/// 与上面`bind:`函数中的(3)对应起来,</span></span><br><span class="line">         <span class="comment">/// 可以看出bindBlock中的x是原信号被subscribe后传出的值，即对应下面的value</span></span><br><span class="line">         <span class="comment">/// 也即flattenMap中的 block执行后传出的值，</span></span><br><span class="line">         <span class="comment">/// 即上面的(RACStream * (^ block)(id value))中的value</span></span><br><span class="line">         <span class="comment">/// flattenMap:后的那个block其实与bind:后的block基本是一样的，参数都是原信号发出的值，返回值都是RACStream，差别就是一个bool参数，所以说，flattenMap其实就是对bind方法进行了一些安全检查</span></span><br><span class="line">         <span class="comment">/// 综上所述：*flattenMap方法中传进来的那个block参数值就是原信号被订阅后发送的值*</span></span><br><span class="line">        <span class="keyword">return</span> ^(<span class="keyword">id</span> value, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">            <span class="comment">// 下面这个value并不是flattenMap后面block中的那个value，而是(就近原则)原信号中的值；flattenMap后面那个block中的value的值是原信号发出的值被转换为中间信号后，又被订阅后发出去的值，这里要区分开；</span></span><br><span class="line">            <span class="keyword">id</span> stream = block(value) ?: [<span class="keyword">class</span> empty];</span><br><span class="line">            <span class="built_in">NSCAssert</span>([stream isKindOfClass:RACStream.class], <span class="string">@"Value returned from -flattenMap: is not a stream: %@"</span>, stream);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stream;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;] setNameWithFormat:<span class="string">@"[%@] -flattenMap:"</span>, <span class="keyword">self</span>.name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-map"><a href="#3-map" class="headerlink" title="3. map:"></a>3. map:</h5><p><code>map</code>: 下面是<code>map</code>方法的源码，可以看出，<code>map</code>只是对<code>flattenMap</code>传出的<code>vaue</code>（即原信号传出的值）进行了<code>mapBlock</code>操作，并没有再进行订阅操作，即并不像<code>bind：</code>一样再次对原信号进行<code>bindBlock</code>后生成的中间信号进行订阅。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)map:(<span class="keyword">id</span> (^)(<span class="keyword">id</span> value))block &#123;</span><br><span class="line">    <span class="built_in">NSCParameterAssert</span>(block != <span class="literal">nil</span>);</span><br><span class="line"></span><br><span class="line">    Class <span class="keyword">class</span> = <span class="keyword">self</span>.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> flattenMap:^(<span class="keyword">id</span> value) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">class</span> <span class="keyword">return</span>:block(value)];</span><br><span class="line">    &#125;] setNameWithFormat:<span class="string">@"[%@] -map:"</span>, <span class="keyword">self</span>.name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-flatten"><a href="#4-flatten" class="headerlink" title="4. flatten:"></a>4. flatten:</h5><p><code>flatten</code>: 该操作主要作用于信号的信号。原信号<code>O</code>作为信号的信号，在被订阅时输出的数据必然也是个信号<code>(signalValue)</code>，这往往不是我们想要的。当我们执行<code>[O flatten]</code>操作时，因为<code>flatten</code>内部调用了<code>flattenMap</code> (1)，<code>flattenMap</code>里对应的中间信号就是原信号<code>O</code>输出的<code>signalValue</code> (2)。按照之前分析的经验，在<code>flattenMap</code>操作中新信号<code>N</code>输出的结果就是各中间信号<code>M</code>输出的集合。因此在<code>flatten</code>操作中新信号<code>N</code>被订阅时输出的值就是原信号<code>O</code>的各个子信号输出值的集合。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)flatten</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> flattenMap:^(RACSignal *signalValue) &#123; <span class="comment">// (1)</span></span><br><span class="line">            <span class="comment">/// 返回值作为bind:中的中间信号</span></span><br><span class="line">        <span class="keyword">return</span> signalValue; <span class="comment">// (2)</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-小结："><a href="#5-小结：" class="headerlink" title="5. 小结："></a>5. <strong>小结：</strong></h5><p>以前一直不理解<code>flatten</code>与<code>map</code>之间的区别，然后经过不断在源码中打断点，一步步跟代码，终于是明白了：<br><code>flatten</code>和<code>map</code>后面的block返回结果其实最终都会变为<code>bind:</code>方法中的中间信号，但是<code>flatten:</code>的<code>block</code>是直接把原信号发出的值返回来作为中间信号的，所以中间信号被订阅，其实就是原信号发出的值又被订阅，这也就是<code>flatten:</code>能拿到信号中的信号中的值的原因。<br>而<code>map:</code>后面的block是把原信号发出的值加工处理了的，又生成了一个新的信号，即<code>map:</code>方法<code>block</code>返回的中间信号已经不是原来的信号中的信号了，而是把原信号发出的值作为它的包含值的一个新的信号，它被订阅时，发送的是原信号发出的那个值，这就是<code>map</code>拿不到原信号中的信号的原因。<br>说白了就是<code>flatten:</code>操作的始终是原来的信号，而<code>map:</code>会生成一个包含原信号发送值的新信号。</p><hr><h4 id="二、multicast"><a href="#二、multicast" class="headerlink" title="二、multicast:"></a>二、multicast:</h4><p>简单分析一下 <code>- (RACMulticastConnection *)multicast:(RACSubject *)subject;</code>方法：</p><ul><li>1、当 <code>RACSignal</code> 类的实例调用 <code>- (RACMulticastConnection *)multicast:(RACSubject *)subject</code> 时，以 <code>self</code> 和 <code>subject</code> 作为构造参数创建一个 <code>RACMulticastConnection</code> 实例。</li><li>2、<code>RACMulticastConnection</code> 构造的时候，保存 <code>source</code> 和 <code>subject</code> 作为成员变量，创建一个 <code>RACSerialDisposable</code> 对象，用于取消订阅。</li><li>3、当 <code>RACMulticastConnection</code> 类的实例调用 <code>- (RACDisposable *)connect</code> 这个方法的时候，判断是否是第一次。如果是的话 用 <code>_signal</code> 这个成员变量（RACSubject类型）来订阅 <code>sourceSignal</code>， 之后返回 <code>self.serialDisposable</code>，否则直接返回 <code>self.serialDisposable</code> 。</li><li>4、<code>RACMulticastConnection</code> 的 <code>signal</code> 只读属性，就是一个热信号，订阅这个热信号就避免了各种副作用的问题。它会在 <code>- (RACDisposable *)connect</code> 第一次调用后，根据 <code>sourceSignal</code> 的订阅结果来传递事件。</li><li>5、想要确保第一次订阅就能成功订阅 <code>sourceSignal</code> ，可以使用 <code>- (RACSignal *)autoconnect</code> 这个方法，它保证了第一个订阅者触发 <code>sourceSignal</code> 的订阅，也保证了当返回的信号所有订阅者都关闭连接后 <code>sourceSignal</code> 被正确关闭连接。</li><li>6、这里面订阅 <code>sourceSignal</code> 是重点，<code>_signal</code>是一个<code>RACSubject</code>类型，它里面维护着一个可变数组，每当它被订阅时，会把所有的<strong>订阅者</strong>保存到这个数组中。当<code>connection.signal</code>（即<code>_signal</code>）被订阅时，其实是<code>_signal</code>被订阅了。由于<code>_signal</code>是<code>RACSubject</code>类型对象，且<code>_signal</code>也是信号，它里面重写了订阅方法，所以会执行它自己的<code>subscribe:</code>方法，执行此方法之前订阅者参数是<code>RACSubscriber</code>类型，但是在这个subscribe方法中，初始化了一个<code>RACPassthroughSubscriber</code>实例对象，使它作为新的订阅者（其实就是对订阅者进行了一层包装），并把它存入了<code>subject</code>维护的那个订阅者数组里（原来的<code>订阅者</code>和<code>信号</code>被<code>RACPassthroughSubscriber</code>实例保存了），所以数组中最终保存的是<code>RACPassthroughSubscriber</code>类型的订阅者，然后它发送消息的时候调的还是它持有的<code>subject</code>对象进行发送消息。</li><li>7、当<code>RACMulticastConnection</code>调用<code>connect</code>方法时，源信号<code>sourceSignal</code>被<code>_signal</code>订阅，即执行<code>[sourceSignal subscribe:subject]</code>方法，然后执行订阅<code>subscribeNext:</code>block回调，在回调中执行<code>sendNext:</code>，由于订阅者是<code>RACSubject</code>类型的实例对象，它里面也会执行<code>sendNext:</code>方法，此方法中会遍历它的数组中的订阅者依次发送消息。</li><li>8、<code>connect</code>时订阅者是<code>RACSubject</code>发送的<code>sendNext:</code>，subject会拿到它那个订阅者数组遍历，取出其中的<code>RACPassthroughSubscriber</code>对象，然后用<code>RACPassthroughSubscriber</code>对象中的真实的订阅者去发送数据。</li></ul><hr><h4 id="三、RACCommand"><a href="#三、RACCommand" class="headerlink" title="三、RACCommand"></a>三、RACCommand</h4><p>不废话，直接上源码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithEnabled:(RACSignal *)enabledSignal signalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock &#123;</span><br><span class="line">    <span class="built_in">NSCParameterAssert</span>(signalBlock != <span class="literal">nil</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == <span class="literal">nil</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    _activeExecutionSignals = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">    _signalBlock = [signalBlock <span class="keyword">copy</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听`activeExecutionSignals`数组</span></span><br><span class="line">    RACSignal *newActiveExecutionSignals = [[[[[<span class="keyword">self</span></span><br><span class="line">        rac_valuesAndChangesForKeyPath:@keypath(<span class="keyword">self</span>.activeExecutionSignals) options:<span class="built_in">NSKeyValueObservingOptionNew</span> observer:<span class="literal">nil</span>]</span><br><span class="line">        reduceEach:^(<span class="keyword">id</span> _, <span class="built_in">NSDictionary</span> *change) &#123;</span><br><span class="line">            <span class="built_in">NSArray</span> *signals = change[<span class="built_in">NSKeyValueChangeNewKey</span>];</span><br><span class="line">            <span class="keyword">if</span> (signals == <span class="literal">nil</span>) <span class="keyword">return</span> [RACSignal empty];</span><br><span class="line">            <span class="comment">// 把数组转换为信号发送出去</span></span><br><span class="line">            <span class="keyword">return</span> [signals.rac_sequence signalWithScheduler:RACScheduler.immediateScheduler];</span><br><span class="line">        &#125;]</span><br><span class="line">        concat]            <span class="comment">// 把各个信号中的信号连接起来</span></span><br><span class="line">        publish]            <span class="comment">// 广播出去，可以被多个订阅者订阅</span></span><br><span class="line">        autoconnect];    <span class="comment">// 有订阅了再发送广播</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把上面的信号`map`一下,当出现错误的时候转换成`empty`空信号,并在主线程上传递</span></span><br><span class="line">    _executionSignals = [[[newActiveExecutionSignals</span><br><span class="line">        map:^(RACSignal *signal) &#123;</span><br><span class="line">            <span class="keyword">return</span> [signal catchTo:[RACSignal empty]];</span><br><span class="line">        &#125;]</span><br><span class="line">        deliverOn:RACScheduler.mainThreadScheduler]</span><br><span class="line">        setNameWithFormat:<span class="string">@"%@ -executionSignals"</span>, <span class="keyword">self</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先通过`ignoreValues`方法屏蔽掉`sendNext:`的结果，只保留`sendError:`和`sendCompleted`结果，然后再通过`catch:`方法拿到所有的`sendError:`结果，发送给订阅者。</span></span><br><span class="line">    <span class="comment">// 此处用的是`flattenMap`，可以直接获取到错误信息。</span></span><br><span class="line">    RACMulticastConnection *errorsConnection = [[[newActiveExecutionSignals</span><br><span class="line">        flattenMap:^(RACSignal *signal) &#123;</span><br><span class="line">            <span class="keyword">return</span> [[signal</span><br><span class="line">                ignoreValues]</span><br><span class="line">                catch:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">                    <span class="keyword">return</span> [RACSignal <span class="keyword">return</span>:error];</span><br><span class="line">                &#125;];</span><br><span class="line">        &#125;]</span><br><span class="line">        deliverOn:RACScheduler.mainThreadScheduler]</span><br><span class="line">        publish];</span><br><span class="line"></span><br><span class="line">    _errors = [errorsConnection.signal setNameWithFormat:<span class="string">@"%@ -errors"</span>, <span class="keyword">self</span>];</span><br><span class="line">    [errorsConnection connect];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据执行信号的数量判断`RACCommand`当前是否正在执行</span></span><br><span class="line">    RACSignal *immediateExecuting = [RACObserve(<span class="keyword">self</span>, activeExecutionSignals) map:^(<span class="built_in">NSArray</span> *activeSignals) &#123;</span><br><span class="line">        <span class="keyword">return</span> @(activeSignals.count &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否正在执行</span></span><br><span class="line">    _executing = [[[[[immediateExecuting</span><br><span class="line">        deliverOn:RACScheduler.mainThreadScheduler]</span><br><span class="line">        <span class="comment">// This is useful before the first value arrives on the main thread.</span></span><br><span class="line">        startWith:@NO]</span><br><span class="line">        distinctUntilChanged]</span><br><span class="line">        replayLast]</span><br><span class="line">        setNameWithFormat:<span class="string">@"%@ -executing"</span>, <span class="keyword">self</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果允许并发执行，返回`YES`，否则反转`immediateExecuting`信号的结果</span></span><br><span class="line">    RACSignal *moreExecutionsAllowed = [RACSignal</span><br><span class="line">        <span class="keyword">if</span>:RACObserve(<span class="keyword">self</span>, allowsConcurrentExecution)</span><br><span class="line">        then:[RACSignal <span class="keyword">return</span>:@YES]</span><br><span class="line">        <span class="keyword">else</span>:[immediateExecuting not]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enabledSignal == <span class="literal">nil</span>) &#123;</span><br><span class="line">        enabledSignal = [RACSignal <span class="keyword">return</span>:@YES];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        enabledSignal = [[[enabledSignal</span><br><span class="line">            startWith:@YES]</span><br><span class="line">            takeUntil:<span class="keyword">self</span>.rac_willDeallocSignal]</span><br><span class="line">            replayLast];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _immediateEnabled = [[RACSignal</span><br><span class="line">        combineLatest:@[ enabledSignal, moreExecutionsAllowed ]]</span><br><span class="line">        and];</span><br><span class="line"></span><br><span class="line">    _enabled = [[[[[<span class="keyword">self</span>.immediateEnabled</span><br><span class="line">        take:<span class="number">1</span>]</span><br><span class="line">        concat:[[<span class="keyword">self</span>.immediateEnabled skip:<span class="number">1</span>] deliverOn:RACScheduler.mainThreadScheduler]]</span><br><span class="line">        distinctUntilChanged]</span><br><span class="line">        replayLast]</span><br><span class="line">        setNameWithFormat:<span class="string">@"%@ -enabled"</span>, <span class="keyword">self</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时，我们通常会去生成一个RACCommand对象，并传入一个返回signal对象的block。每次RACCommand execute 执行操作时，都会通过传入的这个signal block生成一个执行信号E (1)，并将该信号添加到RACCommand内部信号数组activeExecutionSignals中 (2)，同时将信号E由冷信号转成热信号(3)，最后订阅该热信号(4)，并将其返回(5)。</span></span><br><span class="line">- (RACSignal *)execute:(<span class="keyword">id</span>)input &#123; </span><br><span class="line">    RACSignal *signal = <span class="keyword">self</span>.signalBlock(input); <span class="comment">//（1）</span></span><br><span class="line">    RACMulticastConnection *connection = [[signal subscribeOn:RACScheduler.mainThreadScheduler] multicast:[RACReplaySubject subject]]; <span class="comment">// (3)</span></span><br><span class="line"></span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    [<span class="keyword">self</span> addActiveExecutionSignal:connection.signal]; <span class="comment">// (2)</span></span><br><span class="line"></span><br><span class="line">    [connection.signal subscribeError:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        [<span class="keyword">self</span> removeActiveExecutionSignal:connection.signal];</span><br><span class="line">    &#125; completed:^&#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        [<span class="keyword">self</span> removeActiveExecutionSignal:connection.signal];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    [connection connect]; <span class="comment">// (4)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [connection.signal]; <span class="comment">// (5)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、其他："><a href="#四、其他：" class="headerlink" title="四、其他："></a>四、其他：</h4><p>说说几个函数<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是对`allowsConcurrentExecution`属性的处理方法，利用了属性的原子性，防止资源竞争，值得学习</span></span><br><span class="line"><span class="keyword">@property</span> (atomic, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> allowsConcurrentExecution;</span><br><span class="line"><span class="keyword">@property</span> (atomic, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *activeExecutionSignals;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The mutable array backing `activeExecutionSignals`.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This should only be used while synchronized on `self`.</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *_activeExecutionSignals;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Atomic backing variable for `allowsConcurrentExecution`.</span></span><br><span class="line">    <span class="keyword">volatile</span> uint32_t _allowsConcurrentExecution;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//============================================================</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)allowsConcurrentExecution &#123;</span><br><span class="line">    <span class="keyword">return</span> _allowsConcurrentExecution != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setAllowsConcurrentExecution:(<span class="built_in">BOOL</span>)allowed &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:@keypath(<span class="keyword">self</span>.allowsConcurrentExecution)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allowed) &#123;</span><br><span class="line">        <span class="comment">// 以下函数类似于 `||`  </span></span><br><span class="line">        <span class="comment">// 只要前者和后者有一个为真，那么后者就为真；即：不管`_allowsConcurrentExecution`是否等于1，它最终都会变为`1`，因为前者是1；</span></span><br><span class="line">        OSAtomicOr32Barrier(<span class="number">1</span>, &amp;_allowsConcurrentExecution);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 以下函数类似于 `&amp;&amp;`  </span></span><br><span class="line">        <span class="comment">// 前后二者必须都为真，后者才会变为真；即：不管`_allowsConcurrentExecution`等于0还是1，它最终都会变为`0`，因为前者是0</span></span><br><span class="line">        OSAtomicAnd32Barrier(<span class="number">0</span>, &amp;_allowsConcurrentExecution);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动调用KVO，通知监听者 `allowsConcurrentExecution`属性改变了</span></span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:@keypath(<span class="keyword">self</span>.allowsConcurrentExecution)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================数组属性================================</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)activeExecutionSignals &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [_activeExecutionSignals <span class="keyword">copy</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addActiveExecutionSignal:(RACSignal *)signal &#123;</span><br><span class="line">    <span class="built_in">NSCParameterAssert</span>([signal isKindOfClass:RACSignal.class]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">NSIndexSet</span> *indexes = [<span class="built_in">NSIndexSet</span> indexSetWithIndex:_activeExecutionSignals.count];</span><br><span class="line">        [<span class="keyword">self</span> willChange:<span class="built_in">NSKeyValueChangeInsertion</span> valuesAtIndexes:indexes forKey:@keypath(<span class="keyword">self</span>.activeExecutionSignals)];</span><br><span class="line">        [_activeExecutionSignals addObject:signal];</span><br><span class="line">        [<span class="keyword">self</span> didChange:<span class="built_in">NSKeyValueChangeInsertion</span> valuesAtIndexes:indexes forKey:@keypath(<span class="keyword">self</span>.activeExecutionSignals)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeActiveExecutionSignal:(RACSignal *)signal &#123;</span><br><span class="line">    <span class="built_in">NSCParameterAssert</span>([signal isKindOfClass:RACSignal.class]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 从当前数组中获取到要移除的对象的indexSets，如果不存在直接返回</span></span><br><span class="line">        <span class="built_in">NSIndexSet</span> *indexes = [_activeExecutionSignals indexesOfObjectsPassingTest:^ <span class="built_in">BOOL</span> (RACSignal *obj, <span class="built_in">NSUInteger</span> index, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">            <span class="keyword">return</span> obj == signal;</span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (indexes.count == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 手动调用KVO，通知监听者 `activeExecutionSignals` 数组的改变</span></span><br><span class="line">        [<span class="keyword">self</span> willChange:<span class="built_in">NSKeyValueChangeRemoval</span> valuesAtIndexes:indexes forKey:@keypath(<span class="keyword">self</span>.activeExecutionSignals)];</span><br><span class="line">        [_activeExecutionSignals removeObjectsAtIndexes:indexes];</span><br><span class="line">        [<span class="keyword">self</span> didChange:<span class="built_in">NSKeyValueChangeRemoval</span> valuesAtIndexes:indexes forKey:@keypath(<span class="keyword">self</span>.activeExecutionSignals)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4><h5 id="附1：部分函数的图表解释"><a href="#附1：部分函数的图表解释" class="headerlink" title="附1：部分函数的图表解释"></a>附1：部分函数的图表解释</h5><blockquote><p><img src="http://img0.tuicool.com/QbyMjyR.png" alt="CombineLatest"><br><img src="http://img2.tuicool.com/JBrMn2r.png" alt="Zip"><br><img src="http://img0.tuicool.com/Nr2AriV.png" alt="操作结果"><br><img src="http://img1.tuicool.com/U3Mzym3.png" alt="Merge"><br><img src="http://img0.tuicool.com/faIv6bu.png" alt="Concat"></p></blockquote><h5 id="附2：ReactiveCocoa和RxSwift-API图"><a href="#附2：ReactiveCocoa和RxSwift-API图" class="headerlink" title="附2：ReactiveCocoa和RxSwift API图"></a>附2：<code>ReactiveCocoa</code>和<code>RxSwift</code> API图</h5><blockquote><p>引用自<a href="https://github.com/aiqiuqiu/FRPCheatSheeta" target="_blank" rel="noopener">FRPCheatSheeta</a></p></blockquote><p><strong>1. ReactiveCocoa-ObjC</strong><br><img src="http://ww1.sinaimg.cn/large/006tNbRwjw1f69ss3l0y4j31jf1cpwtm.jpg" alt="ReactiveCocoa-Objc"></p><p><strong>2. ReactiveCocoa-Swift</strong><br><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f69u9n630vj31kw10nk1g.jpg" alt="ReactiveCocoaV4.x-Swift.png"></p><p><strong>3. RxSwift</strong><br><img src="http://ww2.sinaimg.cn/large/006tNbRwjw1f69u2fugtjj317k1n1tis.jpg" alt="RXSwift.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><ul><li><a href="http://www.jianshu.com/p/d262f2c55fbe" target="_blank" rel="noopener">RAC核心元素与信号流</a> </li><li><a href="http://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-3.html" target="_blank" rel="noopener">细说ReactiveCocoa的冷信号与热信号（三）：怎么处理冷信号与热信号</a> </li><li><a href="http://www.tuicool.com/sites/NRbMbqa" target="_blank" rel="noopener">Halfrost’s Field分析ReactiveCocoa的系列文章</a></li><li><a href="http://www.tuicool.com/articles/QJrqeam" target="_blank" rel="noopener">Reactive Cocoa中的@weakify、@strongify的实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、bind、flattenMap和map&quot;&gt;&lt;a href=&quot;#一、bind、flattenMap和map&quot; class=&quot;headerlink&quot; title=&quot;一、bind、flattenMap和map&quot;&gt;&lt;/a&gt;一、bind、flattenMap和map&lt;/
      
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
      <category term="RAC" scheme="http://yoursite.com/tags/RAC/"/>
    
      <category term="源码分析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/13/hello-world/"/>
    <id>http://yoursite.com/2018/08/13/hello-world/</id>
    <published>2018-08-13T14:32:47.000Z</published>
    <updated>2018-08-28T11:32:22.397Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
